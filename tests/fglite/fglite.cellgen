#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <math.h>

#define __NROWS	700
#define __NCOLS	1000
#define __NSPEC	8
const int NROWS = __NROWS;
const int NCOLS = __NCOLS;
const int NSPEC = __NSPEC;

#define DX          250.0
#define DY          250.0

#define SOURCE_X	500
#define SOURCE_Y	350

#define SOURCE_RATE	4.67E+23

double16b_t conc_spe[__NROWS][__NCOLS][__NSPEC] __attribute__((aligned(128)));
double16b_t wind_u_spe[__NROWS][__NCOLS] __attribute__((aligned(128)));
double16b_t wind_v_spe[__NROWS][__NCOLS] __attribute__((aligned(128)));
double16b_t diff_spe[__NROWS][__NCOLS] __attribute__((aligned(128)));

double conc_ppe[__NROWS][__NCOLS][__NSPEC];
double wind_u_ppe[__NROWS][__NCOLS];
double wind_v_ppe[__NROWS][__NCOLS];
double diff_ppe[__NROWS][__NCOLS];

int double_eq(double a, double b)
{
	return fabs(a - b) < 0.00001;
}

void all_rows_spe_long(double dt, double16b_t conc[NROWS][NCOLS][NSPEC], double16b_t wind_u[NROWS][NCOLS], double16b_t diff[NROWS][NCOLS])
{
	#pragma cell buffer(32) shared(double16b_t* wind_u = wind_u[NROWS][NCOLS], double16b_t* conc = conc[NROWS][NCOLS][NSPEC], double16b_t* diff = diff[NROWS][NCOLS]) private(double dt = dt)
	{
	int i, s;
	for (i = 0; i < NROWS; i++) {
		for (s = 0; s < NSPEC; s++) {

			double wind;
			double diff_term;
			double advec_term;
			double advec_termL;
			double advec_termR;
			int __i;
			double c[NCOLS];
			double dcdx[NCOLS];

			double crow1[NCOLS];
			double crow2[NCOLS];
			double wrow[NCOLS];
			double drow[NCOLS];

			double cbound[4];
			double wbound[4];
			double dbound[4];

			int k;
			for (k = 0; k < NCOLS; ++k) {
				crow1[k] = conc[i][k][s].num;
				wrow[k] = wind_u[i][k].num;
				drow[k] = diff[i][k].num;
			}
				
			cbound[0] = crow1[NCOLS - 2];
			cbound[1] = crow1[NCOLS - 1];
			cbound[2] = crow1[0];
			cbound[3] = crow1[1];
			wbound[0] = wrow[NCOLS - 2];
			wbound[1] = wrow[NCOLS - 1];
			wbound[2] = wrow[0];
			wbound[3] = wrow[1];
			dbound[0] = drow[NCOLS - 2];
			dbound[1] = drow[NCOLS - 1];
			dbound[2] = drow[0];
			dbound[3] = drow[1];

			for (__i = 0; __i < NCOLS; __i++) {
				c[__i] = crow2[__i] = crow1[__i];
			}

			wind = (wbound[1] + wrow[0]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-cbound[0] + 5.0 * cbound[1] + 2.0 * crow1[0]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * cbound[1] + 5.0 * crow1[0] - crow1[1]);
			}
			advec_termL *= wind;
			wind = (wrow[1] + wrow[0]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-cbound[1] + 5.0 * crow1[0] + 2.0 * crow1[1]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * crow1[0] + 5.0 * crow1[1] - crow1[2]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dbound[1] + drow[0]) / 2) * (cbound[1] - crow1[0]) -
				 ((drow[0] + drow[1]) / 2) * (crow1[0] - crow1[1])) / (1000.0 * 1000.0);
			dcdx[0] = advec_term + diff_term;

			wind = (wbound[2] + wrow[1]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-cbound[1] + 5.0 * cbound[2] + 2.0 * crow1[1]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * cbound[2] + 5.0 * crow1[1] - crow1[2]);
			}
			advec_termL *= wind;
			wind = (wrow[2] + wrow[1]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-cbound[2] + 5.0 * crow1[1] + 2.0 * crow1[2]);
			}				
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * crow1[1] + 5.0 * crow1[2] - crow1[3]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dbound[2] + drow[1]) / 2) * (cbound[2] - crow1[1]) -
				 ((drow[1] + drow[2]) / 2) * (crow1[1] - crow1[2])) / (1000.0 * 1000.0);
			dcdx[1] = advec_term + diff_term;

			for (__i = 2; __i < NCOLS - 2; __i++) {
				wind = (wrow[__i - 1] + wrow[__i]) / 2.0;
				if (wind >= 0.0) {
					advec_termL = (1.0 / 6.0) * (-crow1[__i - 2] + 5.0 * crow1[__i - 1] + 2.0 * crow1[__i]);
				}
				else {
					advec_termL = (1.0 / 6.0) * (2.0 * crow1[__i - 1] + 5.0 * crow1[__i] - crow1[__i + 1]);
				}
				advec_termL *= wind;
				wind = (wrow[__i + 1] + wrow[__i]) / 2.0;
				if (wind >= 0.0) {
					advec_termR = (1.0 / 6.0) * (-crow1[__i - 1] + 5.0 * crow1[__i] + 2.0 * crow1[__i + 1]);
				}
				else {
					advec_termR = (1.0 / 6.0) * (2.0 * crow1[__i] + 5.0 * crow1[__i + 1] - crow1[__i + 2]);
				}
				advec_termR *= wind;
				advec_term = (advec_termL - advec_termR) / 1000.0;
				diff_term = (((drow[__i - 1] + drow[__i]) / 2) * (crow1[__i - 1] - crow1[__i]) -
					 ((drow[__i] + drow[__i + 1]) / 2) * (crow1[__i] - crow1[__i + 1])) / (1000.0 * 1000.0);
				dcdx[__i] = advec_term + diff_term;
			}

			wind = (wrow[NCOLS - 3] + wrow[NCOLS - 2]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-crow1[NCOLS - 4] + 5.0 * crow1[NCOLS - 3] + 2.0 * crow1[NCOLS - 2]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * crow1[NCOLS - 3] + 5.0 * crow1[NCOLS - 2] - cbound[1]);
			}
			advec_termL *= wind;
			wind = (wbound[1] + wrow[NCOLS - 2]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-crow1[NCOLS - 3] + 5.0 * crow1[NCOLS - 2] + 2.0 * cbound[1]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * crow1[NCOLS - 2] + 5.0 * cbound[1] - cbound[2]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((drow[NCOLS - 3] + drow[NCOLS - 2]) / 2) * (crow1[NCOLS - 3] - crow1[NCOLS - 2]) -
				 ((drow[NCOLS - 2] + dbound[1]) / 2) * (crow1[NCOLS - 2] - cbound[1])) / (1000.0 * 1000.0);
			dcdx[NCOLS - 2] = advec_term + diff_term;

			wind = (wrow[NCOLS - 2] + wrow[NCOLS - 1]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-crow1[NCOLS - 3] + 5.0 * crow1[NCOLS - 2] + 2.0 * crow1[NCOLS - 1]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * crow1[NCOLS - 2] + 5.0 * crow1[NCOLS - 1] - cbound[2]);
			}
			advec_termL *= wind;
			wind = (wbound[2] + wrow[NCOLS - 1]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-crow1[NCOLS - 2] + 5.0 * crow1[NCOLS - 1] + 2.0 * cbound[2]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * crow1[NCOLS - 1] + 5.0 * cbound[2] - cbound[3]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((drow[NCOLS - 2] + drow[NCOLS - 1]) / 2) * (crow1[NCOLS - 2] - crow1[NCOLS - 1]) -
				 ((drow[NCOLS - 1] + dbound[2]) / 2) * (crow1[NCOLS - 1] - cbound[2])) / (1000.0 * 1000.0);
			dcdx[NCOLS - 1] = advec_term + diff_term;

			for (__i = 0; __i < NCOLS; __i++) {
				c[__i] += dt * dcdx[__i];
			}

			wind = (wbound[1] + wrow[0]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-cbound[0] + 5.0 * cbound[1] + 2.0 * c[0]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * cbound[1] + 5.0 * c[0] - c[1]);
			}
			advec_termL *= wind;
			wind = (wrow[1] + wrow[0]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-cbound[1] + 5.0 * c[0] + 2.0 * c[1]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * c[0] + 5.0 * c[1] - c[2]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dbound[1] + drow[0]) / 2) * (cbound[1] - c[0]) -
				 ((drow[0] + drow[1]) / 2) * (c[0] - c[1])) / (1000.0 * 1000.0);
			dcdx[0] = advec_term + diff_term;

			wind = (wbound[2] + wrow[1]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-cbound[1] + 5.0 * cbound[2] + 2.0 * c[1]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * cbound[2] + 5.0 * c[1] - c[2]);
			}
			advec_termL *= wind;
			wind = (wrow[2] + wrow[1]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-cbound[2] + 5.0 * c[1] + 2.0 * c[2]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * c[1] + 5.0 * c[2] - c[3]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dbound[2] + drow[1]) / 2) * (cbound[2] - c[1]) -
				 ((drow[1] + drow[2]) / 2) * (c[1] - c[2])) / (1000.0 * 1000.0);
			dcdx[1] = advec_term + diff_term;

			for (__i= 2; __i < NCOLS - 2; __i++) {
				wind = (wrow[__i - 1] + wrow[__i]) / 2.0;
				if (wind >= 0.0) {
					advec_termL = (1.0 / 6.0) * (-c[__i - 2] + 5.0 * c[__i - 1] + 2.0 * c[__i]);
				}
				else {
					advec_termL = (1.0 / 6.0) * (2.0 * c[__i - 1] + 5.0 * c[__i] - c[__i + 1]);
				}
				advec_termL *= wind;
				wind = (wrow[__i + 1] + wrow[__i]) / 2.0;
				if (wind >= 0.0) {
					advec_termR = (1.0 / 6.0) * (-c[__i - 1] + 5.0 * c[__i] + 2.0 * c[__i + 1]);
				}
				else {
					advec_termR = (1.0 / 6.0) * (2.0 * c[__i] + 5.0 * c[__i + 1] - c[__i + 2]);
				}
				advec_termR *= wind;
				advec_term = (advec_termL - advec_termR) / 1000.0;
				diff_term = (((drow[__i - 1] + drow[__i]) / 2) * (c[__i - 1] - c[__i]) -
					 ((drow[__i] + drow[__i + 1]) / 2) * (c[__i] - c[__i + 1])) / (1000.0 * 1000.0);
				dcdx[__i] = advec_term + diff_term;
			}

			wind = (wrow[NCOLS - 3] + wrow[NCOLS - 2]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-c[NCOLS - 4] + 5.0 * c[NCOLS - 3] + 2.0 * c[NCOLS - 2]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * c[NCOLS - 3] + 5.0 * c[NCOLS - 2] - cbound[1]);
			}
			advec_termL *= wind;
			wind = (wbound[1] + wrow[NCOLS - 2]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-c[NCOLS - 3] + 5.0 * c[NCOLS - 2] + 2.0 * cbound[1]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * c[NCOLS - 2] + 5.0 * cbound[1] - cbound[2]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((drow[NCOLS - 3] + drow[NCOLS - 2]) / 2) * (c[NCOLS - 3] - c[NCOLS - 2]) -
				 ((drow[NCOLS - 2] + dbound[1]) / 2) * (c[NCOLS - 2] - cbound[1])) / (1000.0 * 1000.0);
			dcdx[NCOLS - 2] = advec_term + diff_term;

			wind = (wrow[NCOLS - 2] + wrow[NCOLS - 1]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-c[NCOLS - 3] + 5.0 * c[NCOLS - 2] + 2.0 * c[NCOLS - 1]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * c[NCOLS - 2] + 5.0 * c[NCOLS - 1] - cbound[2]);
			}
			advec_termL *= wind;
			wind = (wbound[2] + wrow[NCOLS - 1]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-c[NCOLS - 2] + 5.0 * c[NCOLS - 1] + 2.0 * cbound[2]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * c[NCOLS - 1] + 5.0 * cbound[2] - cbound[3]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((drow[NCOLS - 2] + drow[NCOLS - 1]) / 2) * (c[NCOLS - 2] - c[NCOLS - 1]) -
				 ((drow[NCOLS - 1] + dbound[2]) / 2) * (c[NCOLS - 1] - cbound[2])) / (1000.0 * 1000.0);
			dcdx[NCOLS - 1] = advec_term + diff_term;

			for (__i = 0; __i < NCOLS; __i++) {
				c[__i] += dt * dcdx[__i];
			}

			for (__i = 0; __i < NCOLS; __i++) {
				crow2[__i] = 0.5 * (crow2[__i] + c[__i]);
				if (crow2[__i] < 0.0) {
					crow2[__i] = 0.0;
				}
			}

			for (k = 0; k < NCOLS; k++) {
				conc[i][k][s].num = crow2[k];
			}
		}
	}
	}
}

void all_rows_spe_short(double dt, double16b_t conc[NROWS][NCOLS][NSPEC], double16b_t wind_u[NROWS][NCOLS], double16b_t diff[NROWS][NCOLS])
{
	#pragma cell buffer(32) shared(double16b_t* wind_u = wind_u[NROWS][NCOLS], double16b_t* wind_um1 = wind_u[NROWS][NCOLS], double16b_t* wind_up1 = wind_u[NROWS][NCOLS], \
			double16b_t* wind_u_low = wind_u[NROWS][NCOLS], double16b_t* wind_u_high = wind_u[NROWS][NCOLS], \
			double16b_t* conc = conc[NROWS][NCOLS][NSPEC], double16b_t* c_low = conc[NROWS][NCOLS][NSPEC], double16b_t* c_high = conc[NROWS][NCOLS][NSPEC], \
			double16b_t* c_m2 = conc[NROWS][NCOLS][NSPEC], double16b_t* c_m1 = conc[NROWS][NCOLS][NSPEC], \
			double16b_t* c_p1 = conc[NROWS][NCOLS][NSPEC], double16b_t* c_p2 = conc[NROWS][NCOLS][NSPEC], \
			double16b_t* diff = diff[NROWS][NCOLS], double16b_t* diff_low = diff[NROWS][NCOLS], double16b_t* diff_high = diff[NROWS][NCOLS], \
			double16b_t* diff_m1 = diff[NROWS][NCOLS], double16b_t* diff_p1 = diff[NROWS][NCOLS]) private(double dt = dt)
	{
	int i, s;
	for (i = 0; i < NROWS; i++) {
		for (s = 0; s < NSPEC; s++) {

			double wind;
			double diff_term;
			double advec_term;
			double advec_termL;
			double advec_termR;
			double c[NCOLS];
			double dcdx[NCOLS];

			double crow1[NCOLS];
			double wrow[NCOLS];
			double drow[NCOLS];

			double conc_bound[NCOLS];

			double conc_0;
			double conc_1;
			double conc_N2;
			double conc_N1;

			double wind_0;
			double wind_N1;

			double diff_0;
			double diff_N1;

			int k;

			for (k = 0; k < 1; ++k) {
				wind_0 = wind_u_low[i][k].num;
				diff_0 = diff_low[i][k].num;
			}

			for (k = NCOLS - 1; k < NCOLS; ++k) {
				wind_N1 = wind_u_high[i][k].num;
				diff_N1 = diff_high[i][k].num;
			}

			for (k = 0; k < 2; ++k) {
				conc_bound[k] = c_low[i][k][s].num;
			}

			for (k = NCOLS - 2; k < NCOLS; ++k) {
				conc_bound[k] = c_high[i][k][s].num;
			}

			conc_0 = conc_bound[0]; 
			conc_1 = conc_bound[1];
			conc_N2 = conc_bound[NCOLS - 2];
			conc_N1 = conc_bound[NCOLS - 1];

			for (k = 0; k < NCOLS; k++) {
				double conc_k = conc[i][k][s].num;
				double wrow_k = wind_u[i][k].num;
				double drow_k = diff[i][k].num;

				double conc_m2 = c_m2[i][k - 2][s].num;
				double conc_m1 = c_m1[i][k - 1][s].num;
				double conc_p1 = c_p1[i][k + 1][s].num; 
				double conc_p2 = c_p2[i][k + 2][s].num;

				double wrow_m1 = wind_um1[i][k - 1].num;
				double wrow_p1 = wind_up1[i][k + 1].num;

				double drow_m1 = diff_m1[i][k - 1].num;
				double drow_p1 = diff_p1[i][k + 1].num;

				crow1[k] = c[k] = conc_k;
				wrow[k] = wrow_k;
				drow[k] = drow_k;

				if (k == 0) {
					conc_m2 = conc_N2;
					conc_m1 = conc_N1;

					wrow_m1 = wind_N1;

					drow_m1 = diff_N1;
				}
				else if (k == 1) {
					conc_m2 = conc_N1;
				}
				else if (k == NCOLS - 2) {
					conc_p2 = conc_0;
				}
				else if (k == NCOLS - 1) {
					conc_p1 = conc_0;
					conc_p2 = conc_1;

					wrow_p1 = wind_0;

					drow_p1 = diff_0;
				}

				wind = (wrow_m1 + wrow_k) / 2.0;
				if (wind >= 0.0) {
					advec_termL = (1.0 / 6.0) * (-conc_m2 + 5.0 * conc_m1 + 2.0 * conc_k);
				}
				else {
					advec_termL = (1.0 / 6.0) * (2.0 * conc_m1 + 5.0 * conc_k - conc_p1);
				}
				advec_termL *= wind;
				wind = (wrow_p1 + wrow_k) / 2.0;
				if (wind >= 0.0) {
					advec_termR = (1.0 / 6.0) * (-conc_m1 + 5.0 * conc_k + 2.0 * conc_p1);
				}
				else {
					advec_termR = (1.0 / 6.0) * (2.0 * conc_k + 5.0 * conc_p1 - conc_p2);
				}
				advec_termR *= wind;
				advec_term = (advec_termL - advec_termR) / 1000.0;
				diff_term = (((drow_m1 + drow_k) / 2) * (conc_m1 - conc_k) -
					 ((drow_k + drow_p1) / 2) * (conc_k - conc_p1)) / (1000.0 * 1000.0);
				dcdx[k] = advec_term + diff_term;

				c[k] += dt * dcdx[k];
			}

			for (k = 0; k < NCOLS; k++) {
				double conc_k = c[k];
				double wrow_k = wrow[k];
				double drow_k = drow[k];

				double conc_m2 = c[k - 2];
				double conc_m1 = c[k - 1];
				double conc_p1 = c[k + 1];
				double conc_p2 = c[k + 2];

				double wrow_m1 = wrow[k - 1];
				double wrow_p1 = wrow[k + 1];

				double drow_m1 = drow[k - 1];
				double drow_p1 = drow[k + 1];
				double t;

				if (k == 0) {
					conc_m2 = conc_N2;
					conc_m1 = conc_N1;

					wrow_m1 = wind_N1;

					drow_m1 = diff_N1;
				}
				else if (k == 1) {
					conc_m2 = conc_N1;
					conc_m1 = conc_0;
				}
				else if (k == NCOLS - 2) {
					conc_p1 = conc_N1;
					conc_p2 = conc_0;
				}
				else if (k == NCOLS - 1) {
					conc_p1 = conc_0;
					conc_p2 = conc_1;

					wrow_p1 = wind_0;

					drow_p1 = diff_0;
				}

				wind = (wrow_m1 + wrow_k) / 2.0;
				if (wind >= 0.0) {
					advec_termL = (1.0 / 6.0) * (-conc_m2 + 5.0 * conc_m1 + 2.0 * conc_k);
				}
				else {
					advec_termL = (1.0 / 6.0) * (2.0 * conc_m1 + 5.0 * conc_k - conc_p1);
				}
				advec_termL *= wind;
				wind = (wrow_p1 + wrow_k) / 2.0;
				if (wind >= 0.0) {
					advec_termR = (1.0 / 6.0) * (-conc_m1 + 5.0 * conc_k + 2.0 * conc_p1);
				}
				else {
					advec_termR = (1.0 / 6.0) * (2.0 * conc_k + 5.0 * conc_p1 - conc_p2);
				}
				advec_termR *= wind;
				advec_term = (advec_termL - advec_termR) / 1000.0;
				diff_term = (((drow_m1 + drow_k) / 2) * (conc_m1 - conc_k) -
					 ((drow_k + drow_p1) / 2) * (conc_k - conc_p1)) / (1000.0 * 1000.0);
				dcdx[k] = advec_term + diff_term;

				t = 0.5 * (crow1[k] + (c[k] + dt * dcdx[k]));
				if (t < 0.0) {
					t = 0.0;
				}

				conc[i][k][s].num = t;
			}
		}
	}
	}

}

void all_rows_ppe(double dt, double conc[NROWS][NCOLS][NSPEC], double wind_u[NROWS][NCOLS], double diff[NROWS][NCOLS])
{
	int i, s;
	for (i = 0; i < NROWS; i++) {
		for (s = 0; s < NSPEC; s++) {

			double wind;
			double diff_term;
			double advec_term;
			double advec_termL;
			double advec_termR;
			int __i;
			double c[NCOLS];
			double dcdx[NCOLS];

			double crow1[NCOLS];
			double crow2[NCOLS];
			double wrow[NCOLS];
			double drow[NCOLS];

			double cbound[4];
			double wbound[4];
			double dbound[4];

			int k;
			for (k = 0; k < NCOLS; ++k) {
				crow1[k] = conc[i][k][s];
			}
			for (k = 0; k < NCOLS; ++k) {
				wrow[k] = wind_u[i][k];
			}
			for (k = 0; k < NCOLS; ++k) {
				drow[k] = diff[i][k];
			}
				
			cbound[0] = crow1[NCOLS - 2];
			cbound[1] = crow1[NCOLS - 1];
			cbound[2] = crow1[0];
			cbound[3] = crow1[1];
			wbound[0] = wrow[NCOLS - 2];
			wbound[1] = wrow[NCOLS - 1];
			wbound[2] = wrow[0];
			wbound[3] = wrow[1];
			dbound[0] = drow[NCOLS - 2];
			dbound[1] = drow[NCOLS - 1];
			dbound[2] = drow[0];
			dbound[3] = drow[1];

			for (__i = 0; __i < NCOLS; __i++) {
				c[__i] = crow2[__i] = crow1[__i];
			}

			wind = (wbound[1] + wrow[0]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-cbound[0] + 5.0 * cbound[1] + 2.0 * crow1[0]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * cbound[1] + 5.0 * crow1[0] - crow1[1]);
			}
			advec_termL *= wind;
			wind = (wrow[1] + wrow[0]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-cbound[1] + 5.0 * crow1[0] + 2.0 * crow1[1]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * crow1[0] + 5.0 * crow1[1] - crow1[2]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dbound[1] + drow[0]) / 2) * (cbound[1] - crow1[0]) -
				 ((drow[0] + drow[1]) / 2) * (crow1[0] - crow1[1])) / (1000.0 * 1000.0);
			dcdx[0] = advec_term + diff_term;

			wind = (wbound[2] + wrow[1]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-cbound[1] + 5.0 * cbound[2] + 2.0 * crow1[1]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * cbound[2] + 5.0 * crow1[1] - crow1[2]);
			}
			advec_termL *= wind;
			wind = (wrow[2] + wrow[1]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-cbound[2] + 5.0 * crow1[1] + 2.0 * crow1[2]);
			}				
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * crow1[1] + 5.0 * crow1[2] - crow1[3]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dbound[2] + drow[1]) / 2) * (cbound[2] - crow1[1]) -
				 ((drow[1] + drow[2]) / 2) * (crow1[1] - crow1[2])) / (1000.0 * 1000.0);
			dcdx[1] = advec_term + diff_term;

			for (__i = 2; __i < NCOLS - 2; __i++) {
				wind = (wrow[__i - 1] + wrow[__i]) / 2.0;
				if (wind >= 0.0) {
					advec_termL = (1.0 / 6.0) * (-crow1[__i - 2] + 5.0 * crow1[__i - 1] + 2.0 * crow1[__i]);
				}
				else {
					advec_termL = (1.0 / 6.0) * (2.0 * crow1[__i - 1] + 5.0 * crow1[__i] - crow1[__i + 1]);
				}
				advec_termL *= wind;
				wind = (wrow[__i + 1] + wrow[__i]) / 2.0;
				if (wind >= 0.0) {
					advec_termR = (1.0 / 6.0) * (-crow1[__i - 1] + 5.0 * crow1[__i] + 2.0 * crow1[__i + 1]);
				}
				else {
					advec_termR = (1.0 / 6.0) * (2.0 * crow1[__i] + 5.0 * crow1[__i + 1] - crow1[__i + 2]);
				}
				advec_termR *= wind;
				advec_term = (advec_termL - advec_termR) / 1000.0;
				diff_term = (((drow[__i - 1] + drow[__i]) / 2) * (crow1[__i - 1] - crow1[__i]) -
					 ((drow[__i] + drow[__i + 1]) / 2) * (crow1[__i] - crow1[__i + 1])) / (1000.0 * 1000.0);
				dcdx[__i] = advec_term + diff_term;
			}

			wind = (wrow[NCOLS - 3] + wrow[NCOLS - 2]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-crow1[NCOLS - 4] + 5.0 * crow1[NCOLS - 3] + 2.0 * crow1[NCOLS - 2]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * crow1[NCOLS - 3] + 5.0 * crow1[NCOLS - 2] - cbound[1]);
			}
			advec_termL *= wind;
			wind = (wbound[1] + wrow[NCOLS - 2]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-crow1[NCOLS - 3] + 5.0 * crow1[NCOLS - 2] + 2.0 * cbound[1]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * crow1[NCOLS - 2] + 5.0 * cbound[1] - cbound[2]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((drow[NCOLS - 3] + drow[NCOLS - 2]) / 2) * (crow1[NCOLS - 3] - crow1[NCOLS - 2]) -
				 ((drow[NCOLS - 2] + dbound[1]) / 2) * (crow1[NCOLS - 2] - cbound[1])) / (1000.0 * 1000.0);
			dcdx[NCOLS - 2] = advec_term + diff_term;

			wind = (wrow[NCOLS - 2] + wrow[NCOLS - 1]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-crow1[NCOLS - 3] + 5.0 * crow1[NCOLS - 2] + 2.0 * crow1[NCOLS - 1]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * crow1[NCOLS - 2] + 5.0 * crow1[NCOLS - 1] - cbound[2]);
			}
			advec_termL *= wind;
			wind = (wbound[2] + wrow[NCOLS - 1]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-crow1[NCOLS - 2] + 5.0 * crow1[NCOLS - 1] + 2.0 * cbound[2]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * crow1[NCOLS - 1] + 5.0 * cbound[2] - cbound[3]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((drow[NCOLS - 2] + drow[NCOLS - 1]) / 2) * (crow1[NCOLS - 2] - crow1[NCOLS - 1]) -
				 ((drow[NCOLS - 1] + dbound[2]) / 2) * (crow1[NCOLS - 1] - cbound[2])) / (1000.0 * 1000.0);
			dcdx[NCOLS - 1] = advec_term + diff_term;

			for (__i = 0; __i < NCOLS; __i++) {
				c[__i] += dt * dcdx[__i];
			}

			wind = (wbound[1] + wrow[0]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-cbound[0] + 5.0 * cbound[1] + 2.0 * c[0]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * cbound[1] + 5.0 * c[0] - c[1]);
			}
			advec_termL *= wind;
			wind = (wrow[1] + wrow[0]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-cbound[1] + 5.0 * c[0] + 2.0 * c[1]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * c[0] + 5.0 * c[1] - c[2]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dbound[1] + drow[0]) / 2) * (cbound[1] - c[0]) -
				 ((drow[0] + drow[1]) / 2) * (c[0] - c[1])) / (1000.0 * 1000.0);
			dcdx[0] = advec_term + diff_term;

			wind = (wbound[2] + wrow[1]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-cbound[1] + 5.0 * cbound[2] + 2.0 * c[1]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * cbound[2] + 5.0 * c[1] - c[2]);
			}
			advec_termL *= wind;
			wind = (wrow[2] + wrow[1]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-cbound[2] + 5.0 * c[1] + 2.0 * c[2]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * c[1] + 5.0 * c[2] - c[3]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dbound[2] + drow[1]) / 2) * (cbound[2] - c[1]) -
				 ((drow[1] + drow[2]) / 2) * (c[1] - c[2])) / (1000.0 * 1000.0);
			dcdx[1] = advec_term + diff_term;

			for (__i= 2; __i < NCOLS - 2; __i++) {
				wind = (wrow[__i - 1] + wrow[__i]) / 2.0;
				if (wind >= 0.0) {
					advec_termL = (1.0 / 6.0) * (-c[__i - 2] + 5.0 * c[__i - 1] + 2.0 * c[__i]);
				}
				else {
					advec_termL = (1.0 / 6.0) * (2.0 * c[__i - 1] + 5.0 * c[__i] - c[__i + 1]);
				}
				advec_termL *= wind;
				wind = (wrow[__i + 1] + wrow[__i]) / 2.0;
				if (wind >= 0.0) {
					advec_termR = (1.0 / 6.0) * (-c[__i - 1] + 5.0 * c[__i] + 2.0 * c[__i + 1]);
				}
				else {
					advec_termR = (1.0 / 6.0) * (2.0 * c[__i] + 5.0 * c[__i + 1] - c[__i + 2]);
				}
				advec_termR *= wind;
				advec_term = (advec_termL - advec_termR) / 1000.0;
				diff_term = (((drow[__i - 1] + drow[__i]) / 2) * (c[__i - 1] - c[__i]) -
					 ((drow[__i] + drow[__i + 1]) / 2) * (c[__i] - c[__i + 1])) / (1000.0 * 1000.0);
				dcdx[__i] = advec_term + diff_term;
			}

			wind = (wrow[NCOLS - 3] + wrow[NCOLS - 2]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-c[NCOLS - 4] + 5.0 * c[NCOLS - 3] + 2.0 * c[NCOLS - 2]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * c[NCOLS - 3] + 5.0 * c[NCOLS - 2] - cbound[1]);
			}
			advec_termL *= wind;
			wind = (wbound[1] + wrow[NCOLS - 2]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-c[NCOLS - 3] + 5.0 * c[NCOLS - 2] + 2.0 * cbound[1]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * c[NCOLS - 2] + 5.0 * cbound[1] - cbound[2]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((drow[NCOLS - 3] + drow[NCOLS - 2]) / 2) * (c[NCOLS - 3] - c[NCOLS - 2]) -
				 ((drow[NCOLS - 2] + dbound[1]) / 2) * (c[NCOLS - 2] - cbound[1])) / (1000.0 * 1000.0);
			dcdx[NCOLS - 2] = advec_term + diff_term;

			wind = (wrow[NCOLS - 2] + wrow[NCOLS - 1]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-c[NCOLS - 3] + 5.0 * c[NCOLS - 2] + 2.0 * c[NCOLS - 1]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * c[NCOLS - 2] + 5.0 * c[NCOLS - 1] - cbound[2]);
			}
			advec_termL *= wind;
			wind = (wbound[2] + wrow[NCOLS - 1]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-c[NCOLS - 2] + 5.0 * c[NCOLS - 1] + 2.0 * cbound[2]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * c[NCOLS - 1] + 5.0 * cbound[2] - cbound[3]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((drow[NCOLS - 2] + drow[NCOLS - 1]) / 2) * (c[NCOLS - 2] - c[NCOLS - 1]) -
				 ((drow[NCOLS - 1] + dbound[2]) / 2) * (c[NCOLS - 1] - cbound[2])) / (1000.0 * 1000.0);
			dcdx[NCOLS - 1] = advec_term + diff_term;

			for (__i = 0; __i < NCOLS; __i++) {
				c[__i] += dt * dcdx[__i];
			}

			for (__i = 0; __i < NCOLS; __i++) {
				crow2[__i] = 0.5 * (crow2[__i] + c[__i]);
				if (crow2[__i] < 0.0) {
					crow2[__i] = 0.0;
				}
			}

			for (k = 0; k < NCOLS; k++) {
				conc[i][k][s] = crow2[k];
			}
		}
	}
}

void all_cols_spe_long(double dt, double16b_t conc[NROWS][NCOLS][NSPEC], double16b_t wind_v[NROWS][NCOLS], double16b_t diff[NROWS][NCOLS])
{
	#pragma cell buffer(32) shared(double16b_t* wind_v = wind_v[NROWS][NCOLS], double16b_t* conc = conc[NROWS][NCOLS][NSPEC], double16b_t* diff = diff[NROWS][NCOLS]) private(double dt = dt)
	{
	int j, k, s;
	for (j = 0; j < NCOLS; j++) {
		for (s = 0; s < NSPEC; s++) {

			double ccol1[NROWS];
			double ccol2[NROWS];
			double wcol[NROWS];
			double dcol[NROWS];

			double cbound[4];
			double wbound[4];
			double dbound[4];

			double wind, diff_term, advec_term, advec_termL, advec_termR;

			int i;
			double c[NROWS];
			double dcdx[NROWS];

			for (k = 0; k < NROWS; k++) {
				ccol1[k] = conc[k][j][s].num;
				wcol[k] = wind_v[k][j].num;
				dcol[k] = diff[k][j].num;
			}

			cbound[0] = ccol1[NROWS - 2];
			cbound[1] = ccol1[NROWS - 1];
			cbound[2] = ccol1[0];
			cbound[3] = ccol1[1];
			wbound[0] = wcol[NROWS - 2];
			wbound[1] = wcol[NROWS - 1];
			wbound[2] = wcol[0];
			wbound[3] = wcol[1];
			dbound[0] = dcol[NROWS - 2];
			dbound[1] = dcol[NROWS - 1];
			dbound[2] = dcol[0];
			dbound[3] = dcol[1];

			for (i = 0; i < NROWS; i++) {
				c[i] = ccol2[i] = ccol1[i];
			}

			wind = (wbound[1] + wcol[0]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-cbound[0] + 5.0 * cbound[1] + 2.0 * ccol1[0]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * cbound[1] + 5.0 * ccol1[0] - ccol1[1]);
			}
			advec_termL *= wind;
			wind = (wcol[1] + wcol[0]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-cbound[1] + 5.0 * ccol1[0] + 2.0 * ccol1[1]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * ccol1[0] + 5.0 * ccol1[1] - ccol1[2]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dbound[1] + dcol[0]) / 2) * (cbound[1] - ccol1[0]) -
				 ((dcol[0] + dcol[1]) / 2) * (ccol1[0] - ccol1[1])) / (1000.0 * 1000.0);
			dcdx[0] = advec_term + diff_term;

			wind = (wbound[2] + wcol[1]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-cbound[1] + 5.0 * cbound[2] + 2.0 * ccol1[1]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * cbound[2] + 5.0 * ccol1[1] - ccol1[2]);
			}
			advec_termL *= wind;
			wind = (wcol[2] + wcol[1]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-cbound[2] + 5.0 * ccol1[1] + 2.0 * ccol1[2]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * ccol1[1] + 5.0 * ccol1[2] - ccol1[3]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dbound[2] + dcol[1]) / 2) * (cbound[2] - ccol1[1]) -
				 ((dcol[1] + dcol[2]) / 2) * (ccol1[1] - ccol1[2])) / (1000.0 * 1000.0);
			dcdx[1] = advec_term + diff_term;

			for (i = 2; i < NROWS - 2; i++) {
				wind = (wcol[i - 1] + wcol[i]) / 2.0;
				if (wind >= 0.0) {
					advec_termL = (1.0 / 6.0) * (-ccol1[i - 2] + 5.0 * ccol1[i - 1] + 2.0 * ccol1[i]);
				}
				else {
					advec_termL = (1.0 / 6.0) * (2.0 * ccol1[i - 1] + 5.0 * ccol1[i] - ccol1[i + 1]);
				}
				advec_termL *= wind;
				wind = (wcol[i + 1] + wcol[i]) / 2.0;
				if (wind >= 0.0) {
					advec_termR = (1.0 / 6.0) * (-ccol1[i - 1] + 5.0 * ccol1[i] + 2.0 * ccol1[i + 1]);
				}
				else {
					advec_termR = (1.0 / 6.0) * (2.0 * ccol1[i] + 5.0 * ccol1[i + 1] - ccol1[i + 2]);
				}
				advec_termR *= wind;
				advec_term = (advec_termL - advec_termR) / 1000.0;
				diff_term = (((dcol[i - 1] + dcol[i]) / 2) * (ccol1[i - 1] - ccol1[i]) -
					 ((dcol[i] + dcol[i + 1]) / 2) * (ccol1[i] - ccol1[i + 1])) / (1000.0 * 1000.0);
				dcdx[i] = advec_term + diff_term;
			}

			wind = (wcol[NROWS - 3] + wcol[NROWS - 2]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-ccol1[NROWS - 4] + 5.0 * ccol1[NROWS - 3] + 2.0 * ccol1[NROWS - 2]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * ccol1[NROWS - 3] + 5.0 * ccol1[NROWS - 2] - cbound[1]);
			}
			advec_termL *= wind;
			wind = (wbound[1] + wcol[NROWS - 2]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-ccol1[NROWS - 3] + 5.0 * ccol1[NROWS - 2] + 2.0 * cbound[1]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * ccol1[NROWS - 2] + 5.0 * cbound[1] - cbound[2]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dcol[NROWS - 3] + dcol[NROWS - 2]) / 2) * (ccol1[NROWS - 3] - ccol1[NROWS - 2]) -
				 ((dcol[NROWS - 2] + dbound[1]) / 2) * (ccol1[NROWS - 2] - cbound[1])) / (1000.0 * 1000.0);
			dcdx[NROWS - 2] = advec_term + diff_term;

			wind = (wcol[NROWS - 2] + wcol[NROWS - 1]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-ccol1[NROWS - 3] + 5.0 * ccol1[NROWS - 2] + 2.0 * ccol1[NROWS - 1]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * ccol1[NROWS - 2] + 5.0 * ccol1[NROWS - 1] - cbound[2]);
			}
			advec_termL *= wind;
			wind = (wbound[2] + wcol[NROWS - 1]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-ccol1[NROWS - 2] + 5.0 * ccol1[NROWS - 1] + 2.0 * cbound[2]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * ccol1[NROWS - 1] + 5.0 * cbound[2] - cbound[3]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dcol[NROWS - 2] + dcol[NROWS - 1]) / 2) * (ccol1[NROWS - 2] - ccol1[NROWS - 1]) -
				 ((dcol[NROWS - 1] + dbound[2]) / 2) * (ccol1[NROWS - 1] - cbound[2])) / (1000.0 * 1000.0);
			dcdx[NROWS - 1] = advec_term + diff_term;

			for (i = 0; i < NROWS; ++i) {
				c[i] += dt * dcdx[i];
			}

			wind = (wbound[1] + wcol[0]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-cbound[0] + 5.0 * cbound[1] + 2.0 * c[0]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * cbound[1] + 5.0 * c[0] - c[1]);
			}
			advec_termL *= wind;
			wind = (wcol[1] + wcol[0]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-cbound[1] + 5.0 * c[0] + 2.0 * c[1]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * c[0] + 5.0 * c[1] - c[2]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dbound[1] + dcol[0]) / 2) * (cbound[1] - c[0]) -
				 ((dcol[0] + dcol[1]) / 2) * (c[0] - c[1])) / (1000.0 * 1000.0);
			dcdx[0] = advec_term + diff_term;

			wind = (wbound[2] + wcol[1]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-cbound[1] + 5.0 * cbound[2] + 2.0 * c[1]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * cbound[2] + 5.0 * c[1] - c[2]);
			}
			advec_termL *= wind;
			wind = (wcol[2] + wcol[1]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-cbound[2] + 5.0 * c[1] + 2.0 * c[2]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * c[1] + 5.0 * c[2] - c[3]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dbound[2] + dcol[1]) / 2) * (cbound[2] - c[1]) -
				 ((dcol[1] + dcol[2]) / 2) * (c[1] - c[2])) / (1000.0 * 1000.0);
			dcdx[1] = advec_term + diff_term;

			for (i = 2; i < NROWS - 2; i++) {
				wind = (wcol[i - 1] + wcol[i]) / 2.0;
				if (wind >= 0.0) {
					advec_termL = (1.0 / 6.0) * (-c[i - 2] + 5.0 * c[i - 1] + 2.0 * c[i]);
				}
				else {
					advec_termL = (1.0 / 6.0) * (2.0 * c[i - 1] + 5.0 * c[i] - c[i + 1]);
				}
				advec_termL *= wind;
				wind = (wcol[i + 1] + wcol[i]) / 2.0;
				if (wind >= 0.0) {
					advec_termR = (1.0 / 6.0) * (-c[i - 1] + 5.0 * c[i] + 2.0 * c[i + 1]);
				}
				else {
					advec_termR = (1.0 / 6.0) * (2.0 * c[i] + 5.0 * c[i + 1] - c[i + 2]);
				}
				advec_termR *= wind;
				advec_term = (advec_termL - advec_termR) / 1000.0;
				diff_term = (((dcol[i - 1] + dcol[i]) / 2) * (c[i - 1] - c[i]) -
					 ((dcol[i] + dcol[i + 1]) / 2) * (c[i] - c[i + 1])) / (1000.0 * 1000.0);
				dcdx[i] = advec_term + diff_term;
			}

			wind = (wcol[NROWS - 3] + wcol[NROWS - 2]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-c[NROWS - 4] + 5.0 * c[NROWS - 3] + 2.0 * c[NROWS - 2]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * c[NROWS - 3] + 5.0 * c[NROWS - 2] - cbound[1]);
			}
			advec_termL *= wind;
			wind = (wbound[1] + wcol[NROWS - 2]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-c[NROWS - 3] + 5.0 * c[NROWS - 2] + 2.0 * cbound[1]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * c[NROWS - 2] + 5.0 * cbound[1] - cbound[2]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dcol[NROWS - 3] + dcol[NROWS - 2]) / 2) * (c[NROWS - 3] - c[NROWS - 2]) -
				 ((dcol[NROWS - 2] + dbound[1]) / 2) * (c[NROWS - 2] - cbound[1])) / (1000.0 * 1000.0);
			dcdx[NROWS - 2] = advec_term + diff_term;

			wind = (wcol[NROWS - 2] + wcol[NROWS - 1]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-c[NROWS - 3] + 5.0 * c[NROWS - 2] + 2.0 * c[NROWS - 1]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * c[NROWS - 2] + 5.0 * c[NROWS - 1] - cbound[2]);
			}
			advec_termL *= wind;
			wind = (wbound[2] + wcol[NROWS - 1]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-c[NROWS - 2] + 5.0 * c[NROWS - 1] + 2.0 * cbound[2]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * c[NROWS - 1] + 5.0 * cbound[2] - cbound[3]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dcol[NROWS - 2] + dcol[NROWS - 1]) / 2) * (c[NROWS - 2] - c[NROWS - 1]) -
				 ((dcol[NROWS - 1] + dbound[2]) / 2) * (c[NROWS - 1] - cbound[2])) / (1000.0 * 1000.0);
			dcdx[NROWS - 1] = advec_term + diff_term;

			for (i = 0; i < NROWS; i++) {
				c[i] += dt * dcdx[i];
			}

			for (i = 0; i < NROWS; i++) {
				ccol2[i] = 0.5 * (ccol2[i] + c[i]);
				if (ccol2[i] < 0.0) {
					ccol2[i] = 0.0;
				}
			}

			for (k = 0; k < NROWS; k++) {
				conc[k][j][s].num = ccol2[k];
			}
		}
	}
	}
}

void all_cols_spe_short(double dt, double16b_t conc[NROWS][NCOLS][NSPEC], double16b_t wind_v[NROWS][NCOLS], double16b_t diff[NROWS][NCOLS])
{
	#pragma cell buffer(32) shared(double16b_t* wind_v = wind_v[NROWS][NCOLS], double16b_t* conc = conc[NROWS][NCOLS][NSPEC], double16b_t* diff = diff[NROWS][NCOLS]) private(double dt = dt)
	{
	int j, s, i;
	for (j = 0; j < NCOLS; j++) {
		for (s = 0; s < NSPEC; s++) {

			double ccol1[NROWS];
			double ccol2[NROWS];
			double wcol[NROWS];
			double dcol[NROWS];

			double wind, diff_term, advec_term, advec_termL, advec_termR;
			double conc_0, conc_1, conc_N1, conc_N2;
			double wind_0, wind_1, wind_N1, wind_N2;
			double diff_0, diff_1, diff_N1, diff_N2;

			int i;
			double c[NROWS];
			double dcdx[NROWS];

			for (i = 0; i < NROWS; i++) {
				ccol1[i] = conc[i][j][s].num;
				wcol[i] = wind_v[i][j].num;
				dcol[i] = diff[i][j].num;
				c[i] = ccol2[i] = ccol1[i];
			}

			conc_0 = ccol1[0];
			conc_1 = ccol1[1];
			conc_N1 = ccol1[NROWS - 1];
			conc_N2 = ccol1[NROWS - 2];

			wind_0 = wcol[0];
			wind_1 = wcol[1];
			wind_N1 = wcol[NROWS - 1];
			wind_N2 = wcol[NROWS - 2];

			diff_0 = dcol[0];
			diff_1 = dcol[1];
			diff_N1 = dcol[NROWS - 1];
			diff_N2 = dcol[NROWS - 2];

			for (i = 0; i < NROWS; i++) {
				double conc_m2 = ccol1[i - 2];
				double conc_m1 = ccol1[i - 1];
				double conc_i = ccol1[i];
				double conc_p1 = ccol1[i + 1];
				double conc_p2 = ccol1[i + 2];

				double wind_m1 = wcol[i - 1];
				double wind_i = wcol[i];
				double wind_p1 = wcol[i + 1];

				double diff_m1 = dcol[i - 1];
				double diff_i = dcol[i];
				double diff_p1 = dcol[i + 1];

				if (i == 0) {
					conc_m2 = conc_N2;
					conc_m1 = conc_N1;

					wind_m1 = wind_N1;

					diff_m1 = diff_N1;
				}
				else if (i == 1) {
					conc_m2 = conc_N1;
				}
				else if (i == NROWS - 2) {
					conc_p2 = conc_0;
				}

				else if (i == NROWS - 1) {
					conc_p1 = conc_0;
					conc_p2 = conc_1;

					wind_p1 = wind_0;

					diff_p1 = diff_0;
				}

				wind = (wind_m1 + wind_i) / 2.0;
				if (wind >= 0.0) {
					advec_termL = (1.0 / 6.0) * (-conc_m2 + 5.0 * conc_m1 + 2.0 * conc_i);
				}
				else {
					advec_termL = (1.0 / 6.0) * (2.0 * conc_m1 + 5.0 * conc_i - conc_p1);
				}
				advec_termL *= wind;
				wind = (wind_p1 + wind_i) / 2.0;
				if (wind >= 0.0) {
					advec_termR = (1.0 / 6.0) * (-conc_m1 + 5.0 * conc_i + 2.0 * conc_p1);
				}
				else {
					advec_termR = (1.0 / 6.0) * (2.0 * conc_i + 5.0 * conc_p1 - conc_p2);
				}
				advec_termR *= wind;
				advec_term = (advec_termL - advec_termR) / 1000.0;
				diff_term = (((diff_m1 + diff_i) / 2) * (conc_m1 - conc_i) -
					 ((diff_i + diff_p1) / 2) * (conc_i - conc_p1)) / (1000.0 * 1000.0);
				dcdx[i] = advec_term + diff_term;

				c[i] += dt * dcdx[i];
			}

			for (i = 0; i < NROWS; i++) {
				double conc_m2 = c[i - 2];
				double conc_m1 = c[i - 1];
				double conc_i = c[i];
				double conc_p1 = c[i + 1];
				double conc_p2 = c[i + 2];

				double wind_m1 = wcol[i - 1];
				double wind_i = wcol[i];
				double wind_p1 = wcol[i + 1];

				double diff_m1 = dcol[i - 1];
				double diff_i = dcol[i];
				double diff_p1 = dcol[i + 1];
				double t;

				if (i == 0) {
					conc_m2 = conc_N2;
					conc_m1 = conc_N1;

					wind_m1 = wind_N1;

					diff_m1 = diff_N1;
				}
				else if (i == 1) {
					conc_m2 = conc_N1;
					conc_m1 = conc_0;
				}
				else if (i == NROWS - 2) {
					conc_p1 = conc_N1;
					conc_p2 = conc_0;
				}
				else if (i == NROWS - 1) {
					conc_p1 = conc_0;
					conc_p2 = conc_1;

					wind_p1 = wind_0;

					diff_p1 = diff_0;
				}

				wind = (wind_m1 + wind_i) / 2.0;
				if (wind >= 0.0) {
					advec_termL = (1.0 / 6.0) * (-conc_m2 + 5.0 * conc_m1 + 2.0 * conc_i);
				}
				else {
					advec_termL = (1.0 / 6.0) * (2.0 * conc_m1 + 5.0 * conc_i - conc_p1);
				}
				advec_termL *= wind;
				wind = (wind_p1 + wind_i) / 2.0;
				if (wind >= 0.0) {
					advec_termR = (1.0 / 6.0) * (-conc_m1 + 5.0 * conc_i + 2.0 * conc_p1);
				}
				else {
					advec_termR = (1.0 / 6.0) * (2.0 * conc_i + 5.0 * conc_p1 - conc_p2);
				}
				advec_termR *= wind;
				advec_term = (advec_termL - advec_termR) / 1000.0;
				diff_term = (((diff_m1 + diff_i) / 2) * (conc_m1 - conc_i) -
					 ((diff_i + diff_p1) / 2) * (conc_i - conc_p1)) / (1000.0 * 1000.0);

				dcdx[i] = advec_term + diff_term;

				t = 0.5 * (ccol2[i] + (c[i] + dt * dcdx[i]));
				if (t < 0.0) {
					t = 0.0;
				}

				conc[i][j][s].num = t;
			}
		}
	}
	}
}

void all_cols_ppe(double dt, double conc[NROWS][NCOLS][NSPEC], double wind_v[NROWS][NCOLS], double diff[NROWS][NCOLS])
{
	int j, k, s;
	for (j = 0; j < NCOLS; j++) {
		for (s = 0; s < NSPEC; s++) {

			double ccol1[NROWS];
			double ccol2[NROWS];
			double wcol[NROWS];
			double dcol[NROWS];

			double cbound[4];
			double wbound[4];
			double dbound[4];

			double wind, diff_term, advec_term, advec_termL, advec_termR;

			int i;
			double c[NROWS];
			double dcdx[NROWS];

			for (k = 0; k < NROWS; k++) {
				ccol1[k] = conc[k][j][s];
				wcol[k] = wind_v[k][j];
				dcol[k] = diff[k][j];
			}

			cbound[0] = ccol1[NROWS - 2];
			cbound[1] = ccol1[NROWS - 1];
			cbound[2] = ccol1[0];
			cbound[3] = ccol1[1];
			wbound[0] = wcol[NROWS - 2];
			wbound[1] = wcol[NROWS - 1];
			wbound[2] = wcol[0];
			wbound[3] = wcol[1];
			dbound[0] = dcol[NROWS - 2];
			dbound[1] = dcol[NROWS - 1];
			dbound[2] = dcol[0];
			dbound[3] = dcol[1];

			for (i = 0; i < NROWS; i++) {
				c[i] = ccol2[i] = ccol1[i];
			}

			wind = (wbound[1] + wcol[0]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-cbound[0] + 5.0 * cbound[1] + 2.0 * ccol1[0]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * cbound[1] + 5.0 * ccol1[0] - ccol1[1]);
			}
			advec_termL *= wind;
			wind = (wcol[1] + wcol[0]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-cbound[1] + 5.0 * ccol1[0] + 2.0 * ccol1[1]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * ccol1[0] + 5.0 * ccol1[1] - ccol1[2]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dbound[1] + dcol[0]) / 2) * (cbound[1] - ccol1[0]) -
				 ((dcol[0] + dcol[1]) / 2) * (ccol1[0] - ccol1[1])) / (1000.0 * 1000.0);
			dcdx[0] = advec_term + diff_term;

			wind = (wbound[2] + wcol[1]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-cbound[1] + 5.0 * cbound[2] + 2.0 * ccol1[1]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * cbound[2] + 5.0 * ccol1[1] - ccol1[2]);
			}
			advec_termL *= wind;
			wind = (wcol[2] + wcol[1]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-cbound[2] + 5.0 * ccol1[1] + 2.0 * ccol1[2]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * ccol1[1] + 5.0 * ccol1[2] - ccol1[3]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dbound[2] + dcol[1]) / 2) * (cbound[2] - ccol1[1]) -
				 ((dcol[1] + dcol[2]) / 2) * (ccol1[1] - ccol1[2])) / (1000.0 * 1000.0);
			dcdx[1] = advec_term + diff_term;

			for (i = 2; i < NROWS - 2; i++) {
				wind = (wcol[i - 1] + wcol[i]) / 2.0;
				if (wind >= 0.0) {
					advec_termL = (1.0 / 6.0) * (-ccol1[i - 2] + 5.0 * ccol1[i - 1] + 2.0 * ccol1[i]);
				}
				else {
					advec_termL = (1.0 / 6.0) * (2.0 * ccol1[i - 1] + 5.0 * ccol1[i] - ccol1[i + 1]);
				}
				advec_termL *= wind;
				wind = (wcol[i + 1] + wcol[i]) / 2.0;
				if (wind >= 0.0) {
					advec_termR = (1.0 / 6.0) * (-ccol1[i - 1] + 5.0 * ccol1[i] + 2.0 * ccol1[i + 1]);
				}
				else {
					advec_termR = (1.0 / 6.0) * (2.0 * ccol1[i] + 5.0 * ccol1[i + 1] - ccol1[i + 2]);
				}
				advec_termR *= wind;
				advec_term = (advec_termL - advec_termR) / 1000.0;
				diff_term = (((dcol[i - 1] + dcol[i]) / 2) * (ccol1[i - 1] - ccol1[i]) -
					 ((dcol[i] + dcol[i + 1]) / 2) * (ccol1[i] - ccol1[i + 1])) / (1000.0 * 1000.0);
				dcdx[i] = advec_term + diff_term;
			}

			wind = (wcol[NROWS - 3] + wcol[NROWS - 2]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-ccol1[NROWS - 4] + 5.0 * ccol1[NROWS - 3] + 2.0 * ccol1[NROWS - 2]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * ccol1[NROWS - 3] + 5.0 * ccol1[NROWS - 2] - cbound[1]);
			}
			advec_termL *= wind;
			wind = (wbound[1] + wcol[NROWS - 2]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-ccol1[NROWS - 3] + 5.0 * ccol1[NROWS - 2] + 2.0 * cbound[1]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * ccol1[NROWS - 2] + 5.0 * cbound[1] - cbound[2]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dcol[NROWS - 3] + dcol[NROWS - 2]) / 2) * (ccol1[NROWS - 3] - ccol1[NROWS - 2]) -
				 ((dcol[NROWS - 2] + dbound[1]) / 2) * (ccol1[NROWS - 2] - cbound[1])) / (1000.0 * 1000.0);
			dcdx[NROWS - 2] = advec_term + diff_term;

			wind = (wcol[NROWS - 2] + wcol[NROWS - 1]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-ccol1[NROWS - 3] + 5.0 * ccol1[NROWS - 2] + 2.0 * ccol1[NROWS - 1]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * ccol1[NROWS - 2] + 5.0 * ccol1[NROWS - 1] - cbound[2]);
			}
			advec_termL *= wind;
			wind = (wbound[2] + wcol[NROWS - 1]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-ccol1[NROWS - 2] + 5.0 * ccol1[NROWS - 1] + 2.0 * cbound[2]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * ccol1[NROWS - 1] + 5.0 * cbound[2] - cbound[3]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dcol[NROWS - 2] + dcol[NROWS - 1]) / 2) * (ccol1[NROWS - 2] - ccol1[NROWS - 1]) -
				 ((dcol[NROWS - 1] + dbound[2]) / 2) * (ccol1[NROWS - 1] - cbound[2])) / (1000.0 * 1000.0);
			dcdx[NROWS - 1] = advec_term + diff_term;

			for (i = 0; i < NROWS; i++) {
				c[i] += dt * dcdx[i];
			}

			wind = (wbound[1] + wcol[0]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-cbound[0] + 5.0 * cbound[1] + 2.0 * c[0]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * cbound[1] + 5.0 * c[0] - c[1]);
			}
			advec_termL *= wind;
			wind = (wcol[1] + wcol[0]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-cbound[1] + 5.0 * c[0] + 2.0 * c[1]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * c[0] + 5.0 * c[1] - c[2]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dbound[1] + dcol[0]) / 2) * (cbound[1] - c[0]) -
				 ((dcol[0] + dcol[1]) / 2) * (c[0] - c[1])) / (1000.0 * 1000.0);
			dcdx[0] = advec_term + diff_term;

			wind = (wbound[2] + wcol[1]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-cbound[1] + 5.0 * cbound[2] + 2.0 * c[1]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * cbound[2] + 5.0 * c[1] - c[2]);
			}
			advec_termL *= wind;
			wind = (wcol[2] + wcol[1]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-cbound[2] + 5.0 * c[1] + 2.0 * c[2]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * c[1] + 5.0 * c[2] - c[3]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dbound[2] + dcol[1]) / 2) * (cbound[2] - c[1]) -
				 ((dcol[1] + dcol[2]) / 2) * (c[1] - c[2])) / (1000.0 * 1000.0);
			dcdx[1] = advec_term + diff_term;

			for (i = 2; i < NROWS - 2; i++) {
				wind = (wcol[i - 1] + wcol[i]) / 2.0;
				if (wind >= 0.0) {
					advec_termL = (1.0 / 6.0) * (-c[i - 2] + 5.0 * c[i - 1] + 2.0 * c[i]);
				}
				else {
					advec_termL = (1.0 / 6.0) * (2.0 * c[i - 1] + 5.0 * c[i] - c[i + 1]);
				}
				advec_termL *= wind;
				wind = (wcol[i + 1] + wcol[i]) / 2.0;
				if (wind >= 0.0) {
					advec_termR = (1.0 / 6.0) * (-c[i - 1] + 5.0 * c[i] + 2.0 * c[i + 1]);
				}
				else {
					advec_termR = (1.0 / 6.0) * (2.0 * c[i] + 5.0 * c[i + 1] - c[i + 2]);
				}
				advec_termR *= wind;
				advec_term = (advec_termL - advec_termR) / 1000.0;
				diff_term = (((dcol[i - 1] + dcol[i]) / 2) * (c[i - 1] - c[i]) -
					 ((dcol[i] + dcol[i + 1]) / 2) * (c[i] - c[i + 1])) / (1000.0 * 1000.0);
				dcdx[i] = advec_term + diff_term;
			}

			wind = (wcol[NROWS - 3] + wcol[NROWS - 2]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-c[NROWS - 4] + 5.0 * c[NROWS - 3] + 2.0 * c[NROWS - 2]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * c[NROWS - 3] + 5.0 * c[NROWS - 2] - cbound[1]);
			}
			advec_termL *= wind;
			wind = (wbound[1] + wcol[NROWS - 2]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-c[NROWS - 3] + 5.0 * c[NROWS - 2] + 2.0 * cbound[1]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * c[NROWS - 2] + 5.0 * cbound[1] - cbound[2]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dcol[NROWS - 3] + dcol[NROWS - 2]) / 2) * (c[NROWS - 3] - c[NROWS - 2]) -
				 ((dcol[NROWS - 2] + dbound[1]) / 2) * (c[NROWS - 2] - cbound[1])) / (1000.0 * 1000.0);
			dcdx[NROWS - 2] = advec_term + diff_term;

			wind = (wcol[NROWS - 2] + wcol[NROWS - 1]) / 2.0;
			if (wind >= 0.0) {
				advec_termL = (1.0 / 6.0) * (-c[NROWS - 3] + 5.0 * c[NROWS - 2] + 2.0 * c[NROWS - 1]);
			}
			else {
				advec_termL = (1.0 / 6.0) * (2.0 * c[NROWS - 2] + 5.0 * c[NROWS - 1] - cbound[2]);
			}
			advec_termL *= wind;
			wind = (wbound[2] + wcol[NROWS - 1]) / 2.0;
			if (wind >= 0.0) {
				advec_termR = (1.0 / 6.0) * (-c[NROWS - 2] + 5.0 * c[NROWS - 1] + 2.0 * cbound[2]);
			}
			else {
				advec_termR = (1.0 / 6.0) * (2.0 * c[NROWS - 1] + 5.0 * cbound[2] - cbound[3]);
			}
			advec_termR *= wind;
			advec_term = (advec_termL - advec_termR) / 1000.0;
			diff_term = (((dcol[NROWS - 2] + dcol[NROWS - 1]) / 2) * (c[NROWS - 2] - c[NROWS - 1]) -
				 ((dcol[NROWS - 1] + dbound[2]) / 2) * (c[NROWS - 1] - cbound[2])) / (1000.0 * 1000.0);
			dcdx[NROWS - 1] = advec_term + diff_term;

			for (i = 0; i < NROWS; i++) {
				c[i] += dt * dcdx[i];
			}

			for (i = 0; i < NROWS; i++) {
				ccol2[i] = 0.5 * (ccol2[i] + c[i]);
				if (ccol2[i] < 0.0) {
					ccol2[i] = 0.0;
				}
			}

			for (k = 0; k < NROWS; k++) {
				conc[k][j][s] = ccol2[k];
			}
		}
	}
}

void assert_rows(double16b_t conc_spe[NROWS][NCOLS][NSPEC], double conc_ppe[NROWS][NCOLS][NSPEC])
{
	int i, j, k;

	for (i = 0; i < NROWS; ++i) {
		for (j = 0; j < NSPEC; ++j) {
			for (k = 0; k < NCOLS; ++k) {
				if (!double_eq(conc_spe[i][k][j].num, conc_ppe[i][k][j])) {
					printf("conc rows failed at (%d,%d,%d): spe %f, ppe %f\n",
					       i, k, j, conc_spe[i][k][j].num, conc_ppe[i][k][j]);
					return;
				}
			}
		}

	}
}

void assert_cols(double16b_t conc_spe[NROWS][NCOLS][NSPEC], double conc_ppe[NROWS][NCOLS][NSPEC])
{
	int i, j, k;

	for (i = 0; i < NCOLS; ++i) {
		for (j = 0; j < NSPEC; ++j) {
			for (k = 0; k < NROWS; ++k) {
				if (!double_eq(conc_spe[k][i][j].num, conc_ppe[k][i][j])) {
					printf("conc cols failed at (%d,%d,%d): spe %f, ppe %f\n",
					       k, i, j, conc_spe[k][i][j].num, conc_ppe[k][i][j]);
					return;
				}
			}
		}
	}
}

int main()
{
	int i, j, k;
	for (i = 0; i < NROWS; i++) {
		for (j = 0; j < NCOLS; j++) {
			wind_u_spe[i][j].num = wind_u_ppe[i][j] = (i+1) * (j+1);
			wind_v_spe[i][j].num = wind_v_ppe[i][j] = (i+1) * (j+1);
			diff_spe[i][j].num = diff_ppe[i][j] = (i+1) * (j+1);

			for (k = 0; k < NSPEC; ++k) {
				conc_spe[i][j][k].num = conc_ppe[i][j][k] = (i+1) * (j+1) * (k+1);
			}
		}
	}

	conc_spe[SOURCE_Y][SOURCE_X][0].num += (SOURCE_RATE) / (DX * DY * 1000.0);
	conc_ppe[SOURCE_Y][SOURCE_X][0] += (SOURCE_RATE) / (DX * DY * 1000.0);

	all_rows_spe_long(1.0 / 2.0, conc_spe, wind_u_spe, diff_spe);
	all_rows_ppe(1.0 / 2.0, conc_ppe, wind_u_ppe, diff_ppe);
	assert_rows(conc_spe, conc_ppe);

	all_cols_spe_long(1.0 / 2.0, conc_spe, wind_v_spe, diff_spe);
	all_cols_ppe(1.0 / 2.0, conc_ppe, wind_v_ppe, diff_ppe);
	assert_cols(conc_spe, conc_ppe);

	for (i = 0; i < NROWS; i++) {
		for (j = 0; j < NCOLS; j++) {
			for (k = 0; k < NSPEC; ++k) {
				conc_spe[i][j][k].num = conc_ppe[i][j][k] = (i+1) * (j+1) * (k+1);
			}
		}
	}

	all_rows_spe_short(1.0 / 2.0, conc_spe, wind_u_spe, diff_spe);
	all_rows_ppe(1.0 / 2.0, conc_ppe, wind_u_ppe, diff_ppe);
	assert_rows(conc_spe, conc_ppe);

	all_cols_spe_short(1.0 / 2.0, conc_spe, wind_v_spe, diff_spe);
	all_cols_ppe(1.0 / 2.0, conc_ppe, wind_v_ppe, diff_ppe);
	assert_cols(conc_spe, conc_ppe);

	return 0;
}
