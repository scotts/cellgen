#include <stdio.h>
#include <assert.h>
#include "cellgen.h"

#define N 128
#define ITERATIONS 5

int double_eq(double a, double b)
{
	return fabs(a - b) < 0.00001;
}

unsigned long long spe_matmul(double (*a)[N], double16b_t (*b)[N], double (*c)[N])
{
	const unsigned long long start = get_tb();

	#pragma cell shared(double* a = a[N][N], double16b_t* b = b[N][N], double* c = c[N][N])
	{
		int i, j, k;

		for (i = 0; i < N; ++i) {
			for (j = 0; j < N; ++j) {
				double sum = c[i][j];
				for (k = 0; k < N; ++k) {
					 sum += a[i][k] * b[k][j].num;
				}
				c[i][j] = sum;
			}
		}
	}

	return get_tb() - start;
}

unsigned long long ppe_matmul(double (*a)[N], double (*b)[N], double (*c)[N])
{
	const unsigned long long start = get_tb();

	int i, j, k;

	for (i = 0; i < N; ++i) {
		for (j = 0; j < N; ++j) {
			double sum = c[i][j];
			for (k = 0; k < N; ++k) {
				 sum += a[i][k] * b[k][j];
			}
			c[i][j] = sum;
		}
	}

	return get_tb() - start;
}

void check_results(double (*spe)[N], double (*ppe)[N])
{
	int i, j;
	for (i = 0; i < N; ++i) {
		for (j = 0; j < N; ++j) {
			if (!double_eq(spe[i][j], ppe[i][j])) {
				printf("failure at (%d,%d); spe %f, ppe %f\n", i, j, spe[i][j], ppe[i][j]);
				return;
			}
		}
	}
}

int main()
{
	double (*a_spe)[N] = cellgen_malloc(N * N * sizeof(double));
	double16b_t (*b_spe)[N] = cellgen_malloc(N * N * sizeof(double16b_t));
	double (*c_spe)[N] = cellgen_malloc(N * N * sizeof(double));

	double (*a_ppe)[N] = malloc(N * N * sizeof(double));
	double (*b_ppe)[N] = malloc(N * N * sizeof(double));
	double (*c_ppe)[N] = malloc(N * N * sizeof(double));

	printf("initializing.\n");

	int i, j;
	for (i = 0; i < N; ++i) {
		for (j = 0; j < N; ++j) {
			a_spe[i][j] = a_ppe[i][j] = (i+1)*(j+1);
			b_spe[i][j].num = b_ppe[i][j] = (i+1)*(j+1);
			c_spe[i][j] = c_ppe[i][j] = 0;
		}
	}

	unsigned long long spe_time = 0;
	unsigned long long ppe_time = 0;
	for (i = 0; i < ITERATIONS; ++i) {
		printf("%d: ", i);
		unsigned long long t;
		
		t = spe_matmul(a_spe, b_spe, c_spe);
		printf("spe %f, ", (double)t / timebase);
		spe_time += t;

		t = ppe_matmul(a_ppe, b_ppe, c_ppe);
		printf("ppe %f\n", (double)t / timebase);
		ppe_time += t;

		check_results(c_spe, c_ppe);
	}

	printf("spe avg %f\nppe avg %f\n", (double)(spe_time / ITERATIONS) / timebase, (double)(ppe_time / ITERATIONS) / timebase);

	return 0;
}

