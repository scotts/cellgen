#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include "cellgen.h"

const int N = 100;

void init(int (*a_p)[N], int (*b_p)[N], int16b_t (*a_s)[N], int16b_t (*b_s)[N])
{
	int i, j;
	int count = 1;
	for (i = 0; i < N; ++i) {
		for (j = 0; j < N; ++j) {
			a_p[i][j] = count;
			a_s[i][j].num = count;
			++count;

			b_p[i][j] = 0;
			b_s[i][j].num = 0;
		}
	}
}

void jacobi_on_ppe(int (*a)[N], int (*b)[N])
{
	unsigned int i, j;
	for (i = 3; i < N-1; ++i) {
		for (j = 2; j < N-1; ++j) {
			b[i][j] = a[i-3][j] + a[i+1][j] + a[i][j-2] + a[i][j+1];
		}
	}
}

void jacobi_on_spe(int16b_t (*a)[N], int16b_t (*b)[N])
{
	#pragma cell shared(int16b_t* a = a[N][N], int16b_t* b = b[N][N])
	{
		int i, j;
		for (i = 3; i < N-1; ++i) {
			for (j = 2; j < N-1; ++j) {
				b[i][j].num = a[i-3][j].num + a[i+1][j].num + a[i][j-2].num + a[i][j+1].num;
			}
		}
	}
}

void check_results(int (*b_p)[N], int16b_t (*b_s)[N])
{
	int i, j;
	for (i = 3; i < N-1; ++i) {
		for (j = 2; j < N-1; ++j) {
			if (b_p[i][j] != b_s[i][j].num) {
				printf("fail at (%d,%d) ppe %d, spe %d\n", i, j, b_p[i][j], b_s[i][j].num);
			}
		}
	}
}

int main()
{
	int (*a_p)[N] = malloc(N * N * sizeof(int));
	int (*b_p)[N] = malloc(N * N * sizeof(int));

	int16b_t (*a_s)[N] = cellgen_malloc(N * N * sizeof(int16b_t));
	int16b_t (*b_s)[N] = cellgen_malloc(N * N * sizeof(int16b_t));

	init(a_p, b_p, a_s, b_s);

	jacobi_on_ppe(a_p, b_p);
	jacobi_on_spe(a_s, b_s);

	check_results(b_p, b_s);

	return 0;
}
