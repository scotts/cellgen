#include <stdlib.h>
#include <stdio.h>
#include <assert.h>

#include "cellgen.h"

const unsigned int N = 2000;
const unsigned int W = 4000;

void init_matrix(int16b_t (*matrix)[W], meta_t* meta, partial_t* partials)
{
	srand(1);

	unsigned int i;
	for (i = 0; i < N; ++i) {
		unsigned int j;
		unsigned int entries = ((double)rand() / RAND_MAX) * W;
		for (j = 0; j < entries; ++j) {
			matrix[i][j].num = (i+1) * (j+1);
		}
		meta[i].next = entries;
		meta[i].send = 0;
		meta[i].result = 0;

		partials[i].count = 0;
		partials[i].partial = 0;
	}
}

void ppe_aggregation(int16b_t (*matrix)[W], meta_t* meta, partial_t* partials)
{
	unsigned int i;
	for (i = 0; i < N; ++i) {
		unsigned int j;
		for (j = 0; j < meta[i].next; ++j) {
			partials[i].partial += matrix[i][j].num;
			++partials[i].count;

			if (partials[i].count == W) {
				meta[i].result = partials[i].partial;
				meta[i].send = 1;

				partials[i].count = 0;
				partials[i].partial = 0;
			}
		}

		meta[i].next = 0;
	}
}

void spe_aggregation(int16b_t (*matrix)[W], meta_t* meta, partial_t* partials)
{
	#pragma cell buffer(256) shared(int16b_t* matrix = matrix[N][W], meta_t* meta = meta, partial_t* partials = partials)
	{
		unsigned int i, j;

		for (i = 0; i < N; ++i) {
			unsigned int next = meta[i].next;

			unsigned int count = partials[i].count;
			int partial = partials[i].partial;

			int result = 0;
			char send = 0;

			if (next == 0) {
				continue;
			}

			for (j = 0; j < next; ++j) {
				partial += matrix[i][j].num;
				++count;

				if (count == W) {
					result = partial;
					send = 1;
					partial = 0;
					count = 0;
				}
			}

			meta[i].result = result;
			meta[i].send = send;
			meta[i].next = 0;

			partials[i].partial = partial;
			partials[i].count = count;
		}
	}
}

void check_results(meta_t* meta_p, partial_t* partials_p, meta_t* meta_s, partial_t* partials_s)
{
	unsigned int i;
	for (i = 0; i < N; ++i) {
		assert(meta_p[i].next == meta_s[i].next);
		assert(meta_p[i].send == meta_s[i].send);
		assert(meta_p[i].result == meta_s[i].result);

		assert(partials_p[i].count == partials_s[i].count);
		assert(partials_p[i].partial == partials_s[i].partial);
	}
}

int main()
{
	int16b_t (*matrix_p)[W] = malloc(N * W * sizeof(int16b_t));
	partial_t* partials_p = malloc(N * sizeof(partial_t));
	meta_t* meta_p = malloc(N * sizeof(meta_t));

	int16b_t (*matrix_s)[W] = cellgen_malloc(N * W * sizeof(int16b_t));	
	partial_t* partials_s = cellgen_malloc(N * sizeof(partial_t));
	meta_t* meta_s = cellgen_malloc(N * sizeof(meta_t));

	init_matrix(matrix_p, meta_p, partials_p);
	init_matrix(matrix_s, meta_s, partials_s);

	ppe_aggregation(matrix_p, meta_p, partials_p);
	spe_aggregation(matrix_s, meta_s, partials_s);

	check_results(meta_p, partials_p, meta_s, partials_s);

	return 0;
}
