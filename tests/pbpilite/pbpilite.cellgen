/* pbpilite
 *
 * This unit test contains the Cellgen-only parts of PBPI. The intention 
 * is to make it easier to debug the Cellgen implementation of PBPI. Also, 
 * like any good unit test, it allows us to test the features PBPI uses, but
 * we'll know exactly where and how something fails - figuring this out in 
 * PBPI itself is, at best, annoying.
 */
#include <stdio.h>
#include <assert.h>
#include <math.h>

#define __N 39976
#define __PN 16
#define __FN 4
const int N = __N;
const int QN = __N / 4;
const int PN = __PN;
const int FN = __FN;

double root[__N] __attribute__((aligned(128)));
double l[__N] __attribute__((aligned(128)));
double r[__N] __attribute__((aligned(128)));
double pp[__N] __attribute__((aligned(128)));

double root_ref[__N];

double tl[__PN] __attribute__((aligned(128)));
double tr[__PN] __attribute__((aligned(128)));
double tp[__PN] __attribute__((aligned(128)));

double freq[__FN] __attribute__((aligned(128)));
int weight[__N / 4] __attribute__((aligned(128)));

void assert_equal()
{
	int i;
	for (i = 0; i < N; ++i) {
		if (root[i] != root_ref[i]) {
			printf("failure at %d, ppe %f, spe %f\n", i, root_ref[i], root[i]);
			return;
		}
	}
}

int double_eq(double a, double b)
{
	return fabs(a - b) < 0.0000001;
}

int main()
{
	int i;
	for (i = 0; i < N; ++i) {
		root[i] = root_ref[i] = 1;
		l[i] = 3.14 * (i+1);
		r[i] = 2.71 * (i+1);
		pp[i] = 1.41 * (i+1);
	}

	for (i = 0; i < PN; ++i) {
		tl[i] = (i+1) + (i+1);
		tr[i] = (i+1) * (i+1);
		tp[i] = 1 / (i + 1);
	}

	for (i = 0; i < FN; ++i) {
		freq[i] = 0.69 * (i+1);
	}

	for (i = 0; i < QN; ++i) {
		weight[i] = i;
	}

	for (i = 0; i < QN; ++i) {
		double t1;
		double t2;

		t1 = l[(4*i)] * tl[0] + l[(4*i)+1] * tl[1] + l[(i*4)+2] * tl[2] + l[(i*4)+3] * tl[3];
		t2 = r[(i*4)] * tr[0] + r[(i*4)+1] * tr[1] + r[(i*4)+2] * tr[2] + r[(i*4)+3] * tr[3];
		root_ref[(i*4)] = t1 * t2;

		t1 = l[(i*4)] * tl[4] + l[(i*4)+1] * tl[5] + l[(i*4)+2] * tl[6] + l[(i*4)+3] * tl[7];
		t2 = r[(i*4)] * tr[4] + r[(i*4)+1] * tr[5] + r[(i*4)+2] * tr[6] + r[(i*4)+3] * tr[7];
		root_ref[(i*4)+1] = t1 * t2;

		t1 = l[(i*4)] * tl[8] + l[(i*4)+1] * tl[9] + l[(i*4)+2] * tl[10] + l[(i*4)+3] * tl[11];
		t2 = r[(i*4)] * tr[8] + r[(i*4)+1] * tr[9] + r[(i*4)+2] * tr[10] + r[(i*4)+3] * tr[11];
		root_ref[(i*4)+2] = t1 * t2;

		t1 = l[(i*4)] * tl[12] + l[(i*4)+1] * tl[13] + l[(i*4)+2] * tl[14] + l[(i*4)+3] * tl[15];
		t2 = r[(i*4)] * tr[12] + r[(i*4)+1] * tr[13] + r[(i*4)+2] * tr[14] + r[(i*4)+3] * tr[15];
		root_ref[(i*4)+3] = t1 * t2;
	}

	#pragma cell buffer(0) private(double* tl = tl, double* tr = tr, int QN = QN) shared(double* pn = root, double* pl = l, double* pr = r)
	{
		int i;
		for (i = 0; i < QN; ++i) {
			double t1;
			double t2;

			t1 = pl[(4*i)] * tl[0] + pl[(4*i)+1] * tl[1] + pl[(i*4)+2] * tl[2] + pl[(i*4)+3] * tl[3];
			t2 = pr[(i*4)] * tr[0] + pr[(i*4)+1] * tr[1] + pr[(i*4)+2] * tr[2] + pr[(i*4)+3] * tr[3];
			pn[(i*4)] = t1 * t2;

			t1 = pl[(i*4)] * tl[4] + pl[(i*4)+1] * tl[5] + pl[(i*4)+2] * tl[6] + pl[(i*4)+3] * tl[7];
			t2 = pr[(i*4)] * tr[4] + pr[(i*4)+1] * tr[5] + pr[(i*4)+2] * tr[6] + pr[(i*4)+3] * tr[7];
			pn[(i*4)+1] = t1 * t2;

			t1 = pl[(i*4)] * tl[8] + pl[(i*4)+1] * tl[9] + pl[(i*4)+2] * tl[10] + pl[(i*4)+3] * tl[11];
			t2 = pr[(i*4)] * tr[8] + pr[(i*4)+1] * tr[9] + pr[(i*4)+2] * tr[10] + pr[(i*4)+3] * tr[11];
			pn[(i*4)+2] = t1 * t2;

			t1 = pl[(i*4)] * tl[12] + pl[(i*4)+1] * tl[13] + pl[(i*4)+2] * tl[14] + pl[(i*4)+3] * tl[15];
			t2 = pr[(i*4)] * tr[12] + pr[(i*4)+1] * tr[13] + pr[(i*4)+2] * tr[14] + pr[(i*4)+3] * tr[15];
			pn[(i*4)+3] = t1 * t2;
		}
	}

	assert_equal();

	for (i = 0; i < QN; i++) {
		double t1;
		double t2;
		double t3;

		t1 = l[(i*4)] * tl[0] + l[(i*4)+1] * tl[1] + l[(i*4)+2] * tl[2] + l[(i*4)+3] * tl[3];
		t2 = r[(i*4)] * tr[0] + r[(i*4)+1] * tr[1] + r[(i*4)+2] * tr[2] + r[(i*4)+3] * tr[3];
		t3 = pp[(i*4)] * tp[0] + pp[(i*4)+1] * tp[1] + pp[(i*4)+2] * tp[2] + pp[(i*4)+3] * tp[3];
		root_ref[(i*4)] = t1 * t2 * t3;

		t1 = l[(i*4)] * tl[4] + l[(i*4)+1] * tl[5] + l[(i*4)+2] * tl[6] + l[(i*4)+3] * tl[7];
		t2 = r[(i*4)] * tr[4] + r[(i*4)+1] * tr[5] + r[(i*4)+2] * tr[6] + r[(i*4)+3] * tr[7];
		t3 = pp[(i*4)] * tp[4] + pp[(i*4)+1] * tp[5] + pp[(i*4)+2] * tp[6] + pp[(i*4)+3] * tp[7];
		root_ref[(i*4)+1] = t1 * t2 * t3;

		t1 = l[(i*4)] * tl[8] + l[(i*4)+1] * tl[9] + l[(i*4)+2] * tl[10] + l[(i*4)+3] * tl[11];
		t2 = r[(i*4)] * tr[8] + r[(i*4)+1] * tr[9] + r[(i*4)+2] * tr[10] + r[(i*4)+3] * tr[11];
		t3 = pp[(i*4)] * tp[8] + pp[(i*4)+1] * tp[9] + pp[(i*4)+2] * tp[10] + pp[(i*4)+3] * tp[11];
		root_ref[(i*4)+2] = t1 * t2 * t3;

		t1 = l[(i*4)] * tl[12] + l[(i*4)+1] * tl[13] + l[(i*4)+2] * tl[14] + l[(i*4)+3] * tl[15];
		t2 = r[(i*4)] * tr[12] + r[(i*4)+1] * tr[13] + r[(i*4)+2] * tr[14] + r[(i*4)+3] * tr[15];
		t3 = pp[(i*4)] * tp[12] + pp[(i*4)+1] * tp[13] + pp[(i*4)+2] * tp[14] + pp[(i*4)+3] * tp[15];
		root_ref[(i*4)+3] = t1 * t2 * t3;
	}

	#pragma cell buffer(0) private(double* tl = tl, double* tr = tr, double* tp = tp, int QN = QN) shared(double* pn = root, double* pl = l, double* pr = r, double* pp = pp)
	{
		int i;
		for (i = 0; i < QN; i++) {
			double t1;
			double t2;
			double t3;

			t1 = pl[(i*4)] * tl[0] + pl[(i*4)+1] * tl[1] + pl[(i*4)+2] * tl[2] + pl[(i*4)+3] * tl[3];
			t2 = pr[(i*4)] * tr[0] + pr[(i*4)+1] * tr[1] + pr[(i*4)+2] * tr[2] + pr[(i*4)+3] * tr[3];
			t3 = pp[(i*4)] * tp[0] + pp[(i*4)+1] * tp[1] + pp[(i*4)+2] * tp[2] + pp[(i*4)+3] * tp[3];
			pn[(i*4)] = t1 * t2 * t3;

			t1 = pl[(i*4)] * tl[4] + pl[(i*4)+1] * tl[5] + pl[(i*4)+2] * tl[6] + pl[(i*4)+3] * tl[7];
			t2 = pr[(i*4)] * tr[4] + pr[(i*4)+1] * tr[5] + pr[(i*4)+2] * tr[6] + pr[(i*4)+3] * tr[7];
			t3 = pp[(i*4)] * tp[4] + pp[(i*4)+1] * tp[5] + pp[(i*4)+2] * tp[6] + pp[(i*4)+3] * tp[7];
			pn[(i*4)+1] = t1 * t2 * t3;

			t1 = pl[(i*4)] * tl[8] + pl[(i*4)+1] * tl[9] + pl[(i*4)+2] * tl[10] + pl[(i*4)+3] * tl[11];
			t2 = pr[(i*4)] * tr[8] + pr[(i*4)+1] * tr[9] + pr[(i*4)+2] * tr[10] + pr[(i*4)+3] * tr[11];
			t3 = pp[(i*4)] * tp[8] + pp[(i*4)+1] * tp[9] + pp[(i*4)+2] * tp[10] + pp[(i*4)+3] * tp[11];
			pn[(i*4)+2] = t1 * t2 * t3;

			t1 = pl[(i*4)] * tl[12] + pl[(i*4)+1] * tl[13] + pl[(i*4)+2] * tl[14] + pl[(i*4)+3] * tl[15];
			t2 = pr[(i*4)] * tr[12] + pr[(i*4)+1] * tr[13] + pr[(i*4)+2] * tr[14] + pr[(i*4)+3] * tr[15];
			t3 = pp[(i*4)] * tp[12] + pp[(i*4)+1] * tp[13] + pp[(i*4)+2] * tp[14] + pp[(i*4)+3] * tp[15];
			pn[(i*4)+3] = t1 * t2 * t3;
		}
	}

	assert_equal();

	double lnL = 0.0;
	double lnL_ref = 0.0;

	for (i = 0; i < QN; i++) {
		double temp;

		temp = root_ref[(i*4)] * freq[0] + root_ref[(i*4)+1] * freq[1] + root_ref[(i*4)+2] * freq[2] + root_ref[(i*4)+3] * freq[3];
		temp = log(temp);
		lnL_ref +=  weight[i] * temp;
	}

	#pragma cell buffer(0) reduction(+: double l = lnL) private(double* freq = freq, int QN = QN) shared(double* sroot = root, int* weight = weight)
	{
		int i;
		for (i = 0; i < QN; i++) {
			double temp;

			temp = sroot[(i*4)] * freq[0] + sroot[(i*4)+1] * freq[1] + sroot[(i*4)+2] * freq[2] + sroot[(i*4)+3] * freq[3];
			temp = log(temp);
			l +=  weight[i] * temp;
		}
	}

	if (!double_eq(lnL, lnL_ref)) {
		printf("reduction failure: ppe %f, spe %f\n", lnL_ref, lnL);
	}

	return 0;
}

