#include <stdio.h>
#include <assert.h>

#define __ROW 4096
#define __COL 256
const int ROW = __ROW;
const int COL = __COL;

int16b_t test_in[__ROW][__COL] __attribute((aligned(128)));
int16b_t test_out[__ROW][__COL] __attribute((aligned(128)));
int16b_t test_inout[__ROW][__COL] __attribute((aligned(128)));
int16b_t ref_inout[__ROW][__COL] __attribute((aligned(128)));

void in_and_out(int16b_t in[ROW][COL], int16b_t out[ROW][COL])
{
	int i, j;
	for (i = 0; i < COL; ++i) {
		for (j = 0; j < ROW; ++j) {
			in[j][i].num = i*j;
			out[j][i].num = 0;
		}
	}

	#pragma cell SPE_start(0) SPE_stop(COL) buffer(256) private(int ROW = ROW, int COL = COL) shared(int16b_t* in = in[ROW][COL], int16b_t* out = out[ROW][COL])
	{
		int count = 0;
		int i, j;
		for (i = SPE_start; i < SPE_stop; ++i) {
			for (j = 0; j < ROW; ++j) {
				out[j][i].num = in[j][i].num;
			}
		}
	}

	for (i = 0; i < COL; ++i) {
		for (j = 0; j < ROW; ++j) {
			if (in[j][i].num != out[j][i].num) {
				printf("in and out failure at (%d,%d), in %d, out %d\n", j, i, in[j][i].num, out[j][i].num);
				return;
			}
		}
	}
}

void in_and_out_unroll(int16b_t in[ROW][COL], int16b_t out[ROW][COL])
{
	int i, j;
	for (i = 0; i < COL; ++i) {
		for (j = 0; j < ROW; ++j) {
			in[j][i].num = i*j;
			out[j][i].num = 0;
		}
	}

	#pragma cell SPE_start(0) SPE_stop(COL) unroll(4) private(int ROW = ROW, int COL = COL) shared(int16b_t* in = in[ROW][COL], int16b_t* out = out[ROW][COL])
	{
		int i, j;
		for (i = SPE_start; i < SPE_stop; ++i) {
			for (j = 0; j < ROW; ++j) {
				out[j][i].num = in[j][i].num;
			}
		}
	}

	for (i = 0; i < COL; ++i) {
		for (j = 0; j < ROW; ++j) {
			if (in[j][i].num != out[j][i].num) {
				printf("in and out unroll failure at (%d,%d), in %d, out %d\n", j, i, in[j][i].num, out[j][i].num);
				return;
			}
		}
	}
}

void inout(int16b_t ref[ROW][COL], int16b_t test[ROW][COL])
{
	int i, j;
	int count = 0;	
	for (i = 0; i < COL; ++i) {
		for (j = 0; j < ROW; ++j) {
			test[j][i].num = count;
			ref[j][i].num = 2 * count;
			++count;
		}
	}

	#pragma cell SPE_start(0) SPE_stop(COL) buffer(256) private(int ROW = ROW, int COL = COL) shared(int16b_t* test = test[ROW][COL])
	{
		int i, j;
		for (i = SPE_start; i < SPE_stop; ++i) {
			for (j = 0; j < ROW; ++j) {
				test[j][i].num = 2 * test[j][i].num;
			}
		}
	}

	for (i = 0; i < COL; ++i) {
		for (j = 0; j < ROW; ++j) {
			if (test[j][i].num != ref[j][i].num) {
				printf("inout failure at (%d,%d), test %d, ref %d\n", i, j, test[j][i].num, ref[j][i].num);
				return;
			}
		}
	}
}

void inout_unroll(int16b_t ref[ROW][COL], int16b_t test[ROW][COL])
{
	int i, j;
	int count = 0;	
	for (i = 0; i < COL; ++i) {
		for (j = 0; j < ROW; ++j) {
			test[j][i].num = count;
			ref[j][i].num = 2 * count;
			++count;
		}
	}

	#pragma cell SPE_start(0) SPE_stop(COL) unroll(4) private(int ROW = ROW, int COL = COL) shared(int16b_t* test = test[ROW][COL])
	{
		int i, j;
		for (i = SPE_start; i < SPE_stop; ++i) {
			for (j = 0; j < ROW; ++j) {
				test[j][i].num = 2 * test[j][i].num;
			}
		}
	}

	for (i = 0; i < COL; ++i) {
		for (j = 0; j < ROW; ++j) {
			if (test[j][i].num != ref[j][i].num) {
				printf("inout unroll failure at (%d,%d), test %d, ref %d\n", i, j, test[j][i].num, ref[j][i].num);
				return;
			}
		}
	}
}

int main()
{
	in_and_out(test_in, test_out);
	//in_and_out_unroll(test_in, test_out);
	inout(ref_inout, test_inout);
	//inout_unroll(ref_inout, test_inout);

	return 0;
}
