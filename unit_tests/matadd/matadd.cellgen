#include <stdio.h>
#include <assert.h>
#include <math.h>

#include "cellgen.h"

#define N 1672
#define ITERATIONS 10

int double_eq(double a, double b)
{
	return fabs(a - b) < 0.00001;
}

unsigned long long spe_matmul(double (*a)[N], double (*b)[N], double (*c)[N])
{
	const unsigned long long before = get_tb();

	#pragma cell buffer(16) shared(double* a = a[N][N], double* b = b[N][N], double* c = c[N][N])
	{
		int i, j;

		for (i = 0; i < N; ++i) {
			for (j = 0; j < N; ++j) {
				c[i][j] = a[i][j] + b[i][j];
			}
		}
	}

	const unsigned long long after = get_tb();

	return after - before;
}

void ppe_matmul(double (*a)[N], double (*b)[N], double (*c)[N])
{
	int i, j;

	for (i = 0; i < N; ++i) {
		for (j = 0; j < N; ++j) {
			c[i][j] = a[i][j] + b[i][j];
		}
	}
}

void check_results(double (*spe)[N], double (*ppe)[N])
{
	int i, j;
	for (i = 0; i < N; ++i) {
		for (j = 0; j < N; ++j) {
			if (!double_eq(spe[i][j], ppe[i][j])) {
				printf("failure at (%d,%d); spe %d, ppe %d\n", i, j, spe[i][j], ppe[i][j]);
				return;
			}
		}
	}
}

int main(int argc, char** argv)
{
	int do_timing = 0;

	if (argc > 1) {
		do_timing = 1;
	}

	double (*a_spe)[N] = cellgen_malloc(N * N * sizeof(double));
	double (*b_spe)[N] = cellgen_malloc(N * N * sizeof(double));
	double (*c_spe)[N] = cellgen_malloc(N * N * sizeof(double));

	double (*a_ppe)[N] = malloc(N * N * sizeof(double));
	double (*b_ppe)[N] = malloc(N * N * sizeof(double));
	double (*c_ppe)[N] = malloc(N * N * sizeof(double));

	int i, j;
	for (i = 0; i < N; ++i) {
		for (j = 0; j < N; ++j) {
			a_spe[i][j] = a_ppe[i][j] = (i+1)*(j+1);
			b_spe[i][j] = b_ppe[i][j] = (i+1)*(j+1);
			c_spe[i][j] = c_ppe[i][j] = 0;
		}
	}

	unsigned long long time = 0;
	for (i = 0; i < ITERATIONS; ++i) {
		time += spe_matmul(a_spe, b_spe, c_spe);

		if (!do_timing) {
			ppe_matmul(a_ppe, b_ppe, c_ppe);
			check_results(c_spe, c_ppe);
		}
	}

	printf("%f\n", (double)time / TB);

	return 0;
}

