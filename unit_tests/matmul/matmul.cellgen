#include <stdio.h>
#include <assert.h>

#define N 16

int a_spe[N][N] __attribute__((aligned(128)));
int16b_t b_spe[N][N] __attribute__((aligned(128)));
int c_spe[N][N] __attribute__((aligned(128)));

int a_ppe[N][N];
int b_ppe[N][N];
int c_ppe[N][N];

void spe_matmul(int a[N][N], int16b_t b[N][N], int c[N][N])
{
	#pragma cell buffer(16) shared(int* a = a[N][N], int16b_t* b = b[N][N], int* c = c[N][N])
	{
		int i, j, k;

		for (i = 0; i < N; ++i) {
			for (j = 0; j < N; ++j) {
				int sum = 0;
				for (k = 0; k < N; ++k) {
					 sum += a[i][k] * b[k][j].num;
				}
				c[i][j] = sum;
			}
		}
	}
}

void ppe_matmul(int a[N][N], int b[N][N], int c[N][N])
{
	int i, j, k;

	for (i = 0; i < N; ++i) {
		for (j = 0; j < N; ++j) {
			for (k = 0; k < N; ++k) {
				 c[i][j] += a[i][k] * b[k][j];
			}
		}
	}
}

void check_results(int spe[N][N], int ppe[N][N])
{
	int i, j;
	for (i = 0; i < N; ++i) {
		for (j = 0; j < N; ++j) {
			if (spe[i][j] != ppe[i][j]) {
				printf("failure at (%d,%d); spe %d, ppe %d\n", i, j, spe[i][j], ppe[i][j]);
				return;
			}
		}
	}
}

int main()
{
	int i, j;
	for (i = 0; i < N; ++i) {
		for (j = 0; j < N; ++j) {
			a_spe[i][j] = a_ppe[i][j] = (i+1)*(j+1);
			b_spe[i][j].num = b_ppe[i][j] = (i+1)*(j+1);
			c_spe[i][j] = c_ppe[i][j] = 0;
		}
	}

	spe_matmul(a_spe, b_spe, c_spe);
	ppe_matmul(a_ppe, b_ppe, c_ppe);

	check_results(c_spe, c_ppe);

	return 0;
}

