#include <stdio.h>
#include <assert.h>

#define N 16
#define ITERATIONS 1000

double a_spe[N][N] __attribute__((aligned(128)));
double16b_t b_spe[N][N] __attribute__((aligned(128)));
double c_spe[N][N] __attribute__((aligned(128)));

double a_ppe[N][N];
double b_ppe[N][N];
double c_ppe[N][N];

int timing = 0;

int double_eq(double a, double b)
{
	return fabs(a - b) < 0.00001;
}

void spe_matmul(double a[N][N], double16b_t b[N][N], double c[N][N])
{
	#pragma cell buffer(16) shared(double* a = a[N][N], double16b_t* b = b[N][N], double* c = c[N][N])
	{
		int i, j, k;

		for (i = 0; i < N; ++i) {
			for (j = 0; j < N; ++j) {
				double sum = 0;
				for (k = 0; k < N; ++k) {
					 sum += a[i][k] * b[k][j].num;
				}
				c[i][j] = sum;
			}
		}
	}
}

void ppe_matmul(double a[N][N], double b[N][N], double c[N][N])
{
	int i, j, k;

	for (i = 0; i < N; ++i) {
		for (j = 0; j < N; ++j) {
			double sum = 0;
			for (k = 0; k < N; ++k) {
				 sum += a[i][k] * b[k][j];
			}
			c[i][j] = sum;
		}
	}
}

void check_results(double spe[N][N], double ppe[N][N])
{
	int i, j;
	for (i = 0; i < N; ++i) {
		for (j = 0; j < N; ++j) {
			if (!double_eq(spe[i][j], ppe[i][j])) {
				printf("failure at (%d,%d); spe %d, ppe %d\n", i, j, spe[i][j], ppe[i][j]);
				return;
			}
		}
	}
}

int main(int argc, char** argv)
{
	if (argc > 1) {
		timing = 1;
	}

	int i, j;
	for (i = 0; i < N; ++i) {
		for (j = 0; j < N; ++j) {
			a_spe[i][j] = a_ppe[i][j] = (i+1)*(j+1);
			b_spe[i][j].num = b_ppe[i][j] = (i+1)*(j+1);
			c_spe[i][j] = c_ppe[i][j] = 0;
		}
	}

	for (i = 0; i < ITERATIONS; ++i) {
		spe_matmul(a_spe, b_spe, c_spe);

		if (!timing) {
			ppe_matmul(a_ppe, b_ppe, c_ppe);
			check_results(c_spe, c_ppe);
		}
	}

	return 0;
}

