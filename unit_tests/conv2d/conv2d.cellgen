#include <stdlib.h>
#include <stdio.h>
#include <assert.h>

#include "cellgen.h"

const int I = 100;
const int J = 100;
const int U = 100;
const int V = 100;
const int X = 100 + 100 - 1;
const int Y = 100 + 100 - 1;

void ppe_convolution(int (*a)[Y], int (*h)[V], int (*c)[J])
{
	int i, j, u, v;
	for (i = 0; i < I; ++i) {
		for (j = 0; j < J; ++j) {
			int sum = 0;
			for (u = 0; u < U; ++u) {
				for (v = 0; v < V; ++v) {
					sum += h[u][v] * a[i + u][j + v];

				}
			}
			c[i][j] = sum;
		}
	}
}

void spe_convolution_padded(int16b_t (*a)[Y], int16b_t (*h)[V], int16b_t (*c)[J])
{
	#pragma cell shared(int16b_t* c = c[I][J], int16b_t* h = h[U][V], int16b_t* a = a[X][Y])
	{
		unsigned int i, j, u, v;
		for (i = 0; i < I; ++i) {
			for (j = 0; j < J; ++j) {
				int sum = 0;
				for (u = 0; u < U; ++u) {
					for (v = 0; v < V; ++v) {
						sum += h[u][v].num * a[i + u][j + v].num;

					}
				}
				c[i][j].num = sum;
			}
		}
	}
}

void spe_convolution_buffer(int (*a)[Y], int (*h)[V], int (*c)[J])
{
	#pragma cell buffer(16) shared(int* c = c[I][J], int* h = h[U][V], int* a = a[X][Y])
	{
		unsigned int i, j, u, v;
		for (i = 0; i < I; ++i) {
			for (j = 0; j < J; ++j) {
				int sum = 0;
				for (u = 0; u < U; ++u) {
					for (v = 0; v < V; ++v) {
						sum += h[u][v] * a[i + u][j + v];

					}
				}
				c[i][j] = sum;
			}
		}
	}
}

void correctness_check(int (*c_p)[J], int16b_t (*c_s)[J])
{
	int i, j;

	for (i = 0; i < I; ++i) {
		for (j = 0; j < J; ++j) {
			assert(c_p[i][j] == c_s[i][j].num);
		}
	}
}

int main()
{
	int (*a_p)[Y] = malloc(X * Y * sizeof(int));
	int (*h_p)[V] = malloc(U * V * sizeof(int));
	int (*c_p)[J] = malloc(I * J * sizeof(int));

	int16b_t (*a_s)[Y] = cellgen_malloc(X * Y * sizeof(int16b_t));
	int16b_t (*h_s)[V] = cellgen_malloc(U * V * sizeof(int16b_t));
	int16b_t (*c_s)[J] = cellgen_malloc(I * J * sizeof(int16b_t));

	ppe_convolution(a_p, h_p, c_p);
	spe_convolution_padded(a_s, h_s, c_s);
	spe_convolution_buffer(a_s, h_s, c_s);

	correctness_check(c_p, c_s);

	return 0;
}
