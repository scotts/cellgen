#include <stdio.h>
#include <assert.h>

#define __N1 8
#define __N2 256
#define __N3 4096
const int N1 = __N1;
const int N2 = __N2;
const int N3 = __N3;

int a[__N1][__N2][__N3] __attribute((aligned(128)));
int b[__N1][__N2][__N3] __attribute((aligned(128)));

void in_and_out(int in[N1][N2][N3], int out[N1][N2][N3])
{
	int i, j, k;
	for (i = 0; i < N1; ++i) {
		for (j = 0; j < N2; ++j) {
			for (k = 0; k < N3; ++k) {
				in[i][j][k] = (i+1)*(j+1)*(k+1);
				out[i][j][k] = 0;
			}
		}
	}

	#pragma cell buffer(256) shared(int* in = in[N1][N2][N3], int* out = out[N1][N2][N3])
	{
		int i, j, k;
		for (i = 0; i < N1; ++i) {
			for (j = 0; j < N2; ++j) {
				for (k = 0; k < N3; ++k) {
					out[i][j][k] = in[i][j][k];
				}
			}
		}
	}

	for (i = 0; i < N1; ++i) {
		for (j = 0; j < N2; ++j) {
			for (k = 0; k < N3; ++k) {
				if (in[i][j][k] != out[i][j][k]) {
					printf("in and out failure at (%d,%d,%d), in %d, out %d\n", i, j, k, in[i][j][k], out[i][j][k]);
					return;
				}
			}
		}
	}
}

void inout(int ref[N1][N2][N3], int test[N1][N2][N3])
{
	int i, j, k;
	for (i = 0; i < N1; ++i) {
		for (j = 0; j < N2; ++j) {
			for (k = 0; k < N3; ++k) {
				test[i][j][k] = (i+1)*(j+1)*(k+1);
				ref[i][j][k] = 2 * (i+1)*(j+1)*(k+1);
			}
		}
	}

	#pragma cell buffer(256) shared(int* test = test[N1][N2][N3])
	{
		int i, j, k;
		for (i = 0; i < N1; ++i) {
			for (j = 0; j < N2; ++j) {
				for (k = 0; k < N3; ++k) {
					test[i][j][k] = 2 * test[i][j][k];
				}
			}
		}
	}

	for (i = 0; i < N1; ++i) {
		for (j = 0; j < N2; ++j) {
			for (k = 0; k < N3; ++k) {
				if (ref[i][j][k] != test[i][j][k]) {
					printf("inout failure at (%d,%d,%d), ref %d, test %d\n", i, j, k, ref[i][j][k], test[i][j][k]);
					return;
				}
			}
		}
	}
}

int main()
{
	in_and_out(a, b);
	inout(a, b);

	return 0;
}
